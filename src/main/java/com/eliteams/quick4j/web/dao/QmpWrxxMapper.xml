<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.eliteams.quick4j.web.dao.QmpWrxxMapper">

    <resultMap id="BaseResultMap" type="com.eliteams.quick4j.web.model.QmpWrxx">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="test_by" jdbcType="VARCHAR" property="testBy"/>
        <result column="river_name" jdbcType="VARCHAR" property="riverName"/>
        <result column="section_name" jdbcType="VARCHAR" property="sectionName"/>
        <result column="loc_province" jdbcType="VARCHAR" property="locProvince"/>
        <result column=" basin" jdbcType="VARCHAR" property="basin"/>
        <result column="year" jdbcType="VARCHAR" property="year"/>
        <result column="month" jdbcType="VARCHAR" property="month"/>
        <result column="water_temperature" jdbcType="VARCHAR" property="waterTemperature"/>
        <result column="flow_rate" jdbcType="VARCHAR" property="flowRate"/>
        <result column="ph" jdbcType="VARCHAR" property="ph"/>
        <result column="ddl" jdbcType="VARCHAR" property="ddl"/>
        <result column="rjy" jdbcType="VARCHAR" property="rjy"/>
        <result column="rjy_std" jdbcType="VARCHAR" property="rjyStd"/>
        <result column="gmsyzs" jdbcType="VARCHAR" property="gmsyzs"/>
        <result column="gmsyzs_std" jdbcType="VARCHAR" property="gmsyzsStd"/>
        <result column="shxyl" jdbcType="VARCHAR" property="shxyl"/>
        <result column="shxyl_std" jdbcType="VARCHAR" property="shxylStd"/>
        <result column="ad" jdbcType="VARCHAR" property="ad"/>
        <result column="ad_std" jdbcType="VARCHAR" property="adStd"/>
        <result column="syl" jdbcType="VARCHAR" property="syl"/>
        <result column="syl_std" jdbcType="VARCHAR" property="sylStd"/>
        <result column="hff" jdbcType="VARCHAR" property="hff"/>
        <result column="hff_std" jdbcType="VARCHAR" property="hffStd"/>
        <result column="gong" jdbcType="VARCHAR" property="gong"/>
        <result column="gong_std" jdbcType="VARCHAR" property="gongStd"/>
        <result column="qian" jdbcType="VARCHAR" property="qian"/>
        <result column="qian_std" jdbcType="VARCHAR" property="qianStd"/>
        <result column="hxxyl" jdbcType="VARCHAR" property="hxxyl"/>
        <result column="hxxyl_std" jdbcType="VARCHAR" property="hxxylStd"/>
        <result column="zd" jdbcType="VARCHAR" property="zd"/>
        <result column="zd_std" jdbcType="VARCHAR" property="zdStd"/>
        <result column="zl" jdbcType="VARCHAR" property="zl"/>
        <result column="zl_std" jdbcType="VARCHAR" property="zlStd"/>
        <result column="tong" jdbcType="VARCHAR" property="tong"/>
        <result column="tong_std" jdbcType="VARCHAR" property="tongStd"/>
        <result column="xin" jdbcType="VARCHAR" property="xin"/>
        <result column="xin_std" jdbcType="VARCHAR" property="xinStd"/>
        <result column="qing" jdbcType="VARCHAR" property="qing"/>
        <result column="qing_std" jdbcType="VARCHAR" property="qingStd"/>
        <result column="xi" jdbcType="VARCHAR" property="xi"/>
        <result column="xi_std" jdbcType="VARCHAR" property="xiStd"/>
        <result column="shen" jdbcType="VARCHAR" property="shen"/>
        <result column="shen_std" jdbcType="VARCHAR" property="shenStd"/>
        <result column="ge" jdbcType="VARCHAR" property="ge"/>
        <result column="ge_std" jdbcType="VARCHAR" property="geStd"/>
        <result column="ljg" jdbcType="VARCHAR" property="ljg"/>
        <result column="ljg_std" jdbcType="VARCHAR" property="ljgStd"/>
        <result column="qhw" jdbcType="VARCHAR" property="qhw"/>
        <result column="qhw_std" jdbcType="VARCHAR" property="qhwStd"/>
        <result column="ylzxdj" jdbcType="VARCHAR" property="ylzxdj"/>
        <result column="ylzxdj_std" jdbcType="VARCHAR" property="ylzxdjStd"/>
        <result column="lhw" jdbcType="VARCHAR" property="lhw"/>
        <result column="lhw_std" jdbcType="VARCHAR" property="lhwStd"/>
        <result column="fdcjq" jdbcType="VARCHAR" property="fdcjq"/>
        <result column="fdcjq_std" jdbcType="VARCHAR" property="fdcjqStd"/>
        <result column="quality_type" jdbcType="VARCHAR" property="qualityType"/>
        <result column="quality_target" jdbcType="VARCHAR" property="qualityTarget"/>
        <result column="cbyzjbs" jdbcType="VARCHAR" property="cbyzjbs"/>
        <result column="comment" jdbcType="VARCHAR" property="comment"/>
    </resultMap>

    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and
                                    #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem"
                                             open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria"
                     separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and
                                    #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem"
                                             open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
		id, test_by, river_name, section_name, loc_province, " basin", year,
		month, water_temperature,
		flow_rate, ph, ddl, rjy, rjy_std, gmsyzs, gmsyzs_std, shxyl, shxyl_std, ad,
		ad_std,
		syl, syl_std, hff, hff_std, gong, gong_std, qian, qian_std, hxxyl,
		hxxyl_std, zd,
		zd_std, zl, zl_std, tong, tong_std, xin, xin_std, qing, qing_std, xi, xi_std,
		shen,
		shen_std, ge, ge_std, ljg, ljg_std, qhw, qhw_std, ylzxdj, ylzxdj_std, lhw,
		lhw_std,
		fdcjq, fdcjq_std, quality_type, quality_target, cbyzjbs, comment
	</sql>
    <sql id="mianyuan">
        id,test_by,section_name,year,month,flow_rate,ad,hxxyl,zl
    </sql>
    <select id="selectByExample" parameterType="com.eliteams.quick4j.web.model.QmpWrxxExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        from qmp_wrxx
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>

    </select>

    <select id="selectAllIWant" resultMap="BaseResultMap">
        SELECT
        <include refid="mianyuan"/>
        FROM qmp_wrxx
        WHERE
        <if test="map.loc_city != null">
            test_by LIKE CONCAT('%', #{map.loc_city}, '%') or
        </if>
        <if test="map.loc_city != null">
            test_by LIKE CONCAT('%', #{map.loc_county}, '%') AND
        </if>
        loc_province LIKE CONCAT('%', '辽宁', '%')
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Integer"
            resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from qmp_wrxx
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from qmp_wrxx
		where id = #{id,jdbcType=INTEGER}
	</delete>
    <delete id="deleteByExample" parameterType="com.eliteams.quick4j.web.model.QmpWrxxExample">
        delete from qmp_wrxx
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.eliteams.quick4j.web.model.QmpWrxx">
		insert into qmp_wrxx (id, test_by, river_name,
		section_name, loc_province, " basin",
		year, month, water_temperature,
		flow_rate, ph, ddl,
		rjy, rjy_std, gmsyzs,
		gmsyzs_std, shxyl, shxyl_std,
		ad, ad_std, syl, syl_std,
		hff, hff_std, gong,
		gong_std, qian, qian_std,
		hxxyl, hxxyl_std, zd,
		zd_std, zl, zl_std, tong,
		tong_std, xin, xin_std,
		qing, qing_std, xi,
		xi_std, shen, shen_std,
		ge, ge_std, ljg, ljg_std,
		qhw, qhw_std, ylzxdj,
		ylzxdj_std, lhw, lhw_std,
		fdcjq, fdcjq_std, quality_type,
		quality_target, cbyzjbs, comment
		)
		values (#{id,jdbcType=INTEGER}, #{testBy,jdbcType=VARCHAR},
		#{riverName,jdbcType=VARCHAR},
		#{sectionName,jdbcType=VARCHAR}, #{locProvince,jdbcType=VARCHAR}, #{basin,jdbcType=VARCHAR},
		#{year,jdbcType=VARCHAR}, #{month,jdbcType=VARCHAR},
		#{waterTemperature,jdbcType=VARCHAR},
		#{flowRate,jdbcType=VARCHAR}, #{ph,jdbcType=VARCHAR}, #{ddl,jdbcType=VARCHAR},
		#{rjy,jdbcType=VARCHAR}, #{rjyStd,jdbcType=VARCHAR},
		#{gmsyzs,jdbcType=VARCHAR},
		#{gmsyzsStd,jdbcType=VARCHAR}, #{shxyl,jdbcType=VARCHAR}, #{shxylStd,jdbcType=VARCHAR},
		#{ad,jdbcType=VARCHAR}, #{adStd,jdbcType=VARCHAR},
		#{syl,jdbcType=VARCHAR}, #{sylStd,jdbcType=VARCHAR},
		#{hff,jdbcType=VARCHAR}, #{hffStd,jdbcType=VARCHAR},
		#{gong,jdbcType=VARCHAR},
		#{gongStd,jdbcType=VARCHAR}, #{qian,jdbcType=VARCHAR}, #{qianStd,jdbcType=VARCHAR},
		#{hxxyl,jdbcType=VARCHAR}, #{hxxylStd,jdbcType=VARCHAR},
		#{zd,jdbcType=VARCHAR},
		#{zdStd,jdbcType=VARCHAR}, #{zl,jdbcType=VARCHAR}, #{zlStd,jdbcType=VARCHAR},
		#{tong,jdbcType=VARCHAR},
		#{tongStd,jdbcType=VARCHAR}, #{xin,jdbcType=VARCHAR}, #{xinStd,jdbcType=VARCHAR},
		#{qing,jdbcType=VARCHAR}, #{qingStd,jdbcType=VARCHAR},
		#{xi,jdbcType=VARCHAR},
		#{xiStd,jdbcType=VARCHAR}, #{shen,jdbcType=VARCHAR}, #{shenStd,jdbcType=VARCHAR},
		#{ge,jdbcType=VARCHAR}, #{geStd,jdbcType=VARCHAR},
		#{ljg,jdbcType=VARCHAR}, #{ljgStd,jdbcType=VARCHAR},
		#{qhw,jdbcType=VARCHAR}, #{qhwStd,jdbcType=VARCHAR},
		#{ylzxdj,jdbcType=VARCHAR},
		#{ylzxdjStd,jdbcType=VARCHAR}, #{lhw,jdbcType=VARCHAR}, #{lhwStd,jdbcType=VARCHAR},
		#{fdcjq,jdbcType=VARCHAR}, #{fdcjqStd,jdbcType=VARCHAR},
		#{qualityType,jdbcType=VARCHAR},
		#{qualityTarget,jdbcType=VARCHAR}, #{cbyzjbs,jdbcType=VARCHAR}, #{comment,jdbcType=VARCHAR}
		)
	</insert>
    <insert id="insertSelective" parameterType="com.eliteams.quick4j.web.model.QmpWrxx">
        insert into qmp_wrxx
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="testBy != null">
                test_by,
            </if>
            <if test="riverName != null">
                river_name,
            </if>
            <if test="sectionName != null">
                section_name,
            </if>
            <if test="locProvince != null">
                loc_province,
            </if>
            <if test="basin != null">
                " basin",
            </if>
            <if test="year != null">
                year,
            </if>
            <if test="month != null">
                month,
            </if>
            <if test="waterTemperature != null">
                water_temperature,
            </if>
            <if test="flowRate != null">
                flow_rate,
            </if>
            <if test="ph != null">
                ph,
            </if>
            <if test="ddl != null">
                ddl,
            </if>
            <if test="rjy != null">
                rjy,
            </if>
            <if test="rjyStd != null">
                rjy_std,
            </if>
            <if test="gmsyzs != null">
                gmsyzs,
            </if>
            <if test="gmsyzsStd != null">
                gmsyzs_std,
            </if>
            <if test="shxyl != null">
                shxyl,
            </if>
            <if test="shxylStd != null">
                shxyl_std,
            </if>
            <if test="ad != null">
                ad,
            </if>
            <if test="adStd != null">
                ad_std,
            </if>
            <if test="syl != null">
                syl,
            </if>
            <if test="sylStd != null">
                syl_std,
            </if>
            <if test="hff != null">
                hff,
            </if>
            <if test="hffStd != null">
                hff_std,
            </if>
            <if test="gong != null">
                gong,
            </if>
            <if test="gongStd != null">
                gong_std,
            </if>
            <if test="qian != null">
                qian,
            </if>
            <if test="qianStd != null">
                qian_std,
            </if>
            <if test="hxxyl != null">
                hxxyl,
            </if>
            <if test="hxxylStd != null">
                hxxyl_std,
            </if>
            <if test="zd != null">
                zd,
            </if>
            <if test="zdStd != null">
                zd_std,
            </if>
            <if test="zl != null">
                zl,
            </if>
            <if test="zlStd != null">
                zl_std,
            </if>
            <if test="tong != null">
                tong,
            </if>
            <if test="tongStd != null">
                tong_std,
            </if>
            <if test="xin != null">
                xin,
            </if>
            <if test="xinStd != null">
                xin_std,
            </if>
            <if test="qing != null">
                qing,
            </if>
            <if test="qingStd != null">
                qing_std,
            </if>
            <if test="xi != null">
                xi,
            </if>
            <if test="xiStd != null">
                xi_std,
            </if>
            <if test="shen != null">
                shen,
            </if>
            <if test="shenStd != null">
                shen_std,
            </if>
            <if test="ge != null">
                ge,
            </if>
            <if test="geStd != null">
                ge_std,
            </if>
            <if test="ljg != null">
                ljg,
            </if>
            <if test="ljgStd != null">
                ljg_std,
            </if>
            <if test="qhw != null">
                qhw,
            </if>
            <if test="qhwStd != null">
                qhw_std,
            </if>
            <if test="ylzxdj != null">
                ylzxdj,
            </if>
            <if test="ylzxdjStd != null">
                ylzxdj_std,
            </if>
            <if test="lhw != null">
                lhw,
            </if>
            <if test="lhwStd != null">
                lhw_std,
            </if>
            <if test="fdcjq != null">
                fdcjq,
            </if>
            <if test="fdcjqStd != null">
                fdcjq_std,
            </if>
            <if test="qualityType != null">
                quality_type,
            </if>
            <if test="qualityTarget != null">
                quality_target,
            </if>
            <if test="cbyzjbs != null">
                cbyzjbs,
            </if>
            <if test="comment != null">
                comment,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="testBy != null">
                #{testBy,jdbcType=VARCHAR},
            </if>
            <if test="riverName != null">
                #{riverName,jdbcType=VARCHAR},
            </if>
            <if test="sectionName != null">
                #{sectionName,jdbcType=VARCHAR},
            </if>
            <if test="locProvince != null">
                #{locProvince,jdbcType=VARCHAR},
            </if>
            <if test="basin != null">
                #{basin,jdbcType=VARCHAR},
            </if>
            <if test="year != null">
                #{year,jdbcType=VARCHAR},
            </if>
            <if test="month != null">
                #{month,jdbcType=VARCHAR},
            </if>
            <if test="waterTemperature != null">
                #{waterTemperature,jdbcType=VARCHAR},
            </if>
            <if test="flowRate != null">
                #{flowRate,jdbcType=VARCHAR},
            </if>
            <if test="ph != null">
                #{ph,jdbcType=VARCHAR},
            </if>
            <if test="ddl != null">
                #{ddl,jdbcType=VARCHAR},
            </if>
            <if test="rjy != null">
                #{rjy,jdbcType=VARCHAR},
            </if>
            <if test="rjyStd != null">
                #{rjyStd,jdbcType=VARCHAR},
            </if>
            <if test="gmsyzs != null">
                #{gmsyzs,jdbcType=VARCHAR},
            </if>
            <if test="gmsyzsStd != null">
                #{gmsyzsStd,jdbcType=VARCHAR},
            </if>
            <if test="shxyl != null">
                #{shxyl,jdbcType=VARCHAR},
            </if>
            <if test="shxylStd != null">
                #{shxylStd,jdbcType=VARCHAR},
            </if>
            <if test="ad != null">
                #{ad,jdbcType=VARCHAR},
            </if>
            <if test="adStd != null">
                #{adStd,jdbcType=VARCHAR},
            </if>
            <if test="syl != null">
                #{syl,jdbcType=VARCHAR},
            </if>
            <if test="sylStd != null">
                #{sylStd,jdbcType=VARCHAR},
            </if>
            <if test="hff != null">
                #{hff,jdbcType=VARCHAR},
            </if>
            <if test="hffStd != null">
                #{hffStd,jdbcType=VARCHAR},
            </if>
            <if test="gong != null">
                #{gong,jdbcType=VARCHAR},
            </if>
            <if test="gongStd != null">
                #{gongStd,jdbcType=VARCHAR},
            </if>
            <if test="qian != null">
                #{qian,jdbcType=VARCHAR},
            </if>
            <if test="qianStd != null">
                #{qianStd,jdbcType=VARCHAR},
            </if>
            <if test="hxxyl != null">
                #{hxxyl,jdbcType=VARCHAR},
            </if>
            <if test="hxxylStd != null">
                #{hxxylStd,jdbcType=VARCHAR},
            </if>
            <if test="zd != null">
                #{zd,jdbcType=VARCHAR},
            </if>
            <if test="zdStd != null">
                #{zdStd,jdbcType=VARCHAR},
            </if>
            <if test="zl != null">
                #{zl,jdbcType=VARCHAR},
            </if>
            <if test="zlStd != null">
                #{zlStd,jdbcType=VARCHAR},
            </if>
            <if test="tong != null">
                #{tong,jdbcType=VARCHAR},
            </if>
            <if test="tongStd != null">
                #{tongStd,jdbcType=VARCHAR},
            </if>
            <if test="xin != null">
                #{xin,jdbcType=VARCHAR},
            </if>
            <if test="xinStd != null">
                #{xinStd,jdbcType=VARCHAR},
            </if>
            <if test="qing != null">
                #{qing,jdbcType=VARCHAR},
            </if>
            <if test="qingStd != null">
                #{qingStd,jdbcType=VARCHAR},
            </if>
            <if test="xi != null">
                #{xi,jdbcType=VARCHAR},
            </if>
            <if test="xiStd != null">
                #{xiStd,jdbcType=VARCHAR},
            </if>
            <if test="shen != null">
                #{shen,jdbcType=VARCHAR},
            </if>
            <if test="shenStd != null">
                #{shenStd,jdbcType=VARCHAR},
            </if>
            <if test="ge != null">
                #{ge,jdbcType=VARCHAR},
            </if>
            <if test="geStd != null">
                #{geStd,jdbcType=VARCHAR},
            </if>
            <if test="ljg != null">
                #{ljg,jdbcType=VARCHAR},
            </if>
            <if test="ljgStd != null">
                #{ljgStd,jdbcType=VARCHAR},
            </if>
            <if test="qhw != null">
                #{qhw,jdbcType=VARCHAR},
            </if>
            <if test="qhwStd != null">
                #{qhwStd,jdbcType=VARCHAR},
            </if>
            <if test="ylzxdj != null">
                #{ylzxdj,jdbcType=VARCHAR},
            </if>
            <if test="ylzxdjStd != null">
                #{ylzxdjStd,jdbcType=VARCHAR},
            </if>
            <if test="lhw != null">
                #{lhw,jdbcType=VARCHAR},
            </if>
            <if test="lhwStd != null">
                #{lhwStd,jdbcType=VARCHAR},
            </if>
            <if test="fdcjq != null">
                #{fdcjq,jdbcType=VARCHAR},
            </if>
            <if test="fdcjqStd != null">
                #{fdcjqStd,jdbcType=VARCHAR},
            </if>
            <if test="qualityType != null">
                #{qualityType,jdbcType=VARCHAR},
            </if>
            <if test="qualityTarget != null">
                #{qualityTarget,jdbcType=VARCHAR},
            </if>
            <if test="cbyzjbs != null">
                #{cbyzjbs,jdbcType=VARCHAR},
            </if>
            <if test="comment != null">
                #{comment,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.eliteams.quick4j.web.model.QmpWrxxExample"
            resultType="java.lang.Long">
        select count(*) from qmp_wrxx
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update qmp_wrxx
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.testBy != null">
                test_by = #{record.testBy,jdbcType=VARCHAR},
            </if>
            <if test="record.riverName != null">
                river_name = #{record.riverName,jdbcType=VARCHAR},
            </if>
            <if test="record.sectionName != null">
                section_name = #{record.sectionName,jdbcType=VARCHAR},
            </if>
            <if test="record.locProvince != null">
                loc_province = #{record.locProvince,jdbcType=VARCHAR},
            </if>
            <if test="record.basin != null">
                " basin" = #{record.basin,jdbcType=VARCHAR},
            </if>
            <if test="record.year != null">
                year = #{record.year,jdbcType=VARCHAR},
            </if>
            <if test="record.month != null">
                month = #{record.month,jdbcType=VARCHAR},
            </if>
            <if test="record.waterTemperature != null">
                water_temperature = #{record.waterTemperature,jdbcType=VARCHAR},
            </if>
            <if test="record.flowRate != null">
                flow_rate = #{record.flowRate,jdbcType=VARCHAR},
            </if>
            <if test="record.ph != null">
                ph = #{record.ph,jdbcType=VARCHAR},
            </if>
            <if test="record.ddl != null">
                ddl = #{record.ddl,jdbcType=VARCHAR},
            </if>
            <if test="record.rjy != null">
                rjy = #{record.rjy,jdbcType=VARCHAR},
            </if>
            <if test="record.rjyStd != null">
                rjy_std = #{record.rjyStd,jdbcType=VARCHAR},
            </if>
            <if test="record.gmsyzs != null">
                gmsyzs = #{record.gmsyzs,jdbcType=VARCHAR},
            </if>
            <if test="record.gmsyzsStd != null">
                gmsyzs_std = #{record.gmsyzsStd,jdbcType=VARCHAR},
            </if>
            <if test="record.shxyl != null">
                shxyl = #{record.shxyl,jdbcType=VARCHAR},
            </if>
            <if test="record.shxylStd != null">
                shxyl_std = #{record.shxylStd,jdbcType=VARCHAR},
            </if>
            <if test="record.ad != null">
                ad = #{record.ad,jdbcType=VARCHAR},
            </if>
            <if test="record.adStd != null">
                ad_std = #{record.adStd,jdbcType=VARCHAR},
            </if>
            <if test="record.syl != null">
                syl = #{record.syl,jdbcType=VARCHAR},
            </if>
            <if test="record.sylStd != null">
                syl_std = #{record.sylStd,jdbcType=VARCHAR},
            </if>
            <if test="record.hff != null">
                hff = #{record.hff,jdbcType=VARCHAR},
            </if>
            <if test="record.hffStd != null">
                hff_std = #{record.hffStd,jdbcType=VARCHAR},
            </if>
            <if test="record.gong != null">
                gong = #{record.gong,jdbcType=VARCHAR},
            </if>
            <if test="record.gongStd != null">
                gong_std = #{record.gongStd,jdbcType=VARCHAR},
            </if>
            <if test="record.qian != null">
                qian = #{record.qian,jdbcType=VARCHAR},
            </if>
            <if test="record.qianStd != null">
                qian_std = #{record.qianStd,jdbcType=VARCHAR},
            </if>
            <if test="record.hxxyl != null">
                hxxyl = #{record.hxxyl,jdbcType=VARCHAR},
            </if>
            <if test="record.hxxylStd != null">
                hxxyl_std = #{record.hxxylStd,jdbcType=VARCHAR},
            </if>
            <if test="record.zd != null">
                zd = #{record.zd,jdbcType=VARCHAR},
            </if>
            <if test="record.zdStd != null">
                zd_std = #{record.zdStd,jdbcType=VARCHAR},
            </if>
            <if test="record.zl != null">
                zl = #{record.zl,jdbcType=VARCHAR},
            </if>
            <if test="record.zlStd != null">
                zl_std = #{record.zlStd,jdbcType=VARCHAR},
            </if>
            <if test="record.tong != null">
                tong = #{record.tong,jdbcType=VARCHAR},
            </if>
            <if test="record.tongStd != null">
                tong_std = #{record.tongStd,jdbcType=VARCHAR},
            </if>
            <if test="record.xin != null">
                xin = #{record.xin,jdbcType=VARCHAR},
            </if>
            <if test="record.xinStd != null">
                xin_std = #{record.xinStd,jdbcType=VARCHAR},
            </if>
            <if test="record.qing != null">
                qing = #{record.qing,jdbcType=VARCHAR},
            </if>
            <if test="record.qingStd != null">
                qing_std = #{record.qingStd,jdbcType=VARCHAR},
            </if>
            <if test="record.xi != null">
                xi = #{record.xi,jdbcType=VARCHAR},
            </if>
            <if test="record.xiStd != null">
                xi_std = #{record.xiStd,jdbcType=VARCHAR},
            </if>
            <if test="record.shen != null">
                shen = #{record.shen,jdbcType=VARCHAR},
            </if>
            <if test="record.shenStd != null">
                shen_std = #{record.shenStd,jdbcType=VARCHAR},
            </if>
            <if test="record.ge != null">
                ge = #{record.ge,jdbcType=VARCHAR},
            </if>
            <if test="record.geStd != null">
                ge_std = #{record.geStd,jdbcType=VARCHAR},
            </if>
            <if test="record.ljg != null">
                ljg = #{record.ljg,jdbcType=VARCHAR},
            </if>
            <if test="record.ljgStd != null">
                ljg_std = #{record.ljgStd,jdbcType=VARCHAR},
            </if>
            <if test="record.qhw != null">
                qhw = #{record.qhw,jdbcType=VARCHAR},
            </if>
            <if test="record.qhwStd != null">
                qhw_std = #{record.qhwStd,jdbcType=VARCHAR},
            </if>
            <if test="record.ylzxdj != null">
                ylzxdj = #{record.ylzxdj,jdbcType=VARCHAR},
            </if>
            <if test="record.ylzxdjStd != null">
                ylzxdj_std = #{record.ylzxdjStd,jdbcType=VARCHAR},
            </if>
            <if test="record.lhw != null">
                lhw = #{record.lhw,jdbcType=VARCHAR},
            </if>
            <if test="record.lhwStd != null">
                lhw_std = #{record.lhwStd,jdbcType=VARCHAR},
            </if>
            <if test="record.fdcjq != null">
                fdcjq = #{record.fdcjq,jdbcType=VARCHAR},
            </if>
            <if test="record.fdcjqStd != null">
                fdcjq_std = #{record.fdcjqStd,jdbcType=VARCHAR},
            </if>
            <if test="record.qualityType != null">
                quality_type = #{record.qualityType,jdbcType=VARCHAR},
            </if>
            <if test="record.qualityTarget != null">
                quality_target = #{record.qualityTarget,jdbcType=VARCHAR},
            </if>
            <if test="record.cbyzjbs != null">
                cbyzjbs = #{record.cbyzjbs,jdbcType=VARCHAR},
            </if>
            <if test="record.comment != null">
                comment = #{record.comment,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update qmp_wrxx
        set id = #{record.id,jdbcType=INTEGER},
        test_by = #{record.testBy,jdbcType=VARCHAR},
        river_name = #{record.riverName,jdbcType=VARCHAR},
        section_name = #{record.sectionName,jdbcType=VARCHAR},
        loc_province = #{record.locProvince,jdbcType=VARCHAR},
        " basin" = #{record.basin,jdbcType=VARCHAR},
        year = #{record.year,jdbcType=VARCHAR},
        month = #{record.month,jdbcType=VARCHAR},
        water_temperature = #{record.waterTemperature,jdbcType=VARCHAR},
        flow_rate = #{record.flowRate,jdbcType=VARCHAR},
        ph = #{record.ph,jdbcType=VARCHAR},
        ddl = #{record.ddl,jdbcType=VARCHAR},
        rjy = #{record.rjy,jdbcType=VARCHAR},
        rjy_std = #{record.rjyStd,jdbcType=VARCHAR},
        gmsyzs = #{record.gmsyzs,jdbcType=VARCHAR},
        gmsyzs_std = #{record.gmsyzsStd,jdbcType=VARCHAR},
        shxyl = #{record.shxyl,jdbcType=VARCHAR},
        shxyl_std = #{record.shxylStd,jdbcType=VARCHAR},
        ad = #{record.ad,jdbcType=VARCHAR},
        ad_std = #{record.adStd,jdbcType=VARCHAR},
        syl = #{record.syl,jdbcType=VARCHAR},
        syl_std = #{record.sylStd,jdbcType=VARCHAR},
        hff = #{record.hff,jdbcType=VARCHAR},
        hff_std = #{record.hffStd,jdbcType=VARCHAR},
        gong = #{record.gong,jdbcType=VARCHAR},
        gong_std = #{record.gongStd,jdbcType=VARCHAR},
        qian = #{record.qian,jdbcType=VARCHAR},
        qian_std = #{record.qianStd,jdbcType=VARCHAR},
        hxxyl = #{record.hxxyl,jdbcType=VARCHAR},
        hxxyl_std = #{record.hxxylStd,jdbcType=VARCHAR},
        zd = #{record.zd,jdbcType=VARCHAR},
        zd_std = #{record.zdStd,jdbcType=VARCHAR},
        zl = #{record.zl,jdbcType=VARCHAR},
        zl_std = #{record.zlStd,jdbcType=VARCHAR},
        tong = #{record.tong,jdbcType=VARCHAR},
        tong_std = #{record.tongStd,jdbcType=VARCHAR},
        xin = #{record.xin,jdbcType=VARCHAR},
        xin_std = #{record.xinStd,jdbcType=VARCHAR},
        qing = #{record.qing,jdbcType=VARCHAR},
        qing_std = #{record.qingStd,jdbcType=VARCHAR},
        xi = #{record.xi,jdbcType=VARCHAR},
        xi_std = #{record.xiStd,jdbcType=VARCHAR},
        shen = #{record.shen,jdbcType=VARCHAR},
        shen_std = #{record.shenStd,jdbcType=VARCHAR},
        ge = #{record.ge,jdbcType=VARCHAR},
        ge_std = #{record.geStd,jdbcType=VARCHAR},
        ljg = #{record.ljg,jdbcType=VARCHAR},
        ljg_std = #{record.ljgStd,jdbcType=VARCHAR},
        qhw = #{record.qhw,jdbcType=VARCHAR},
        qhw_std = #{record.qhwStd,jdbcType=VARCHAR},
        ylzxdj = #{record.ylzxdj,jdbcType=VARCHAR},
        ylzxdj_std = #{record.ylzxdjStd,jdbcType=VARCHAR},
        lhw = #{record.lhw,jdbcType=VARCHAR},
        lhw_std = #{record.lhwStd,jdbcType=VARCHAR},
        fdcjq = #{record.fdcjq,jdbcType=VARCHAR},
        fdcjq_std = #{record.fdcjqStd,jdbcType=VARCHAR},
        quality_type = #{record.qualityType,jdbcType=VARCHAR},
        quality_target = #{record.qualityTarget,jdbcType=VARCHAR},
        cbyzjbs = #{record.cbyzjbs,jdbcType=VARCHAR},
        comment = #{record.comment,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.eliteams.quick4j.web.model.QmpWrxx">
        update qmp_wrxx
        <set>
            <if test="testBy != null">
                test_by = #{testBy,jdbcType=VARCHAR},
            </if>
            <if test="riverName != null">
                river_name = #{riverName,jdbcType=VARCHAR},
            </if>
            <if test="sectionName != null">
                section_name = #{sectionName,jdbcType=VARCHAR},
            </if>
            <if test="locProvince != null">
                loc_province = #{locProvince,jdbcType=VARCHAR},
            </if>
            <if test="basin != null">
                " basin" = #{basin,jdbcType=VARCHAR},
            </if>
            <if test="year != null">
                year = #{year,jdbcType=VARCHAR},
            </if>
            <if test="month != null">
                month = #{month,jdbcType=VARCHAR},
            </if>
            <if test="waterTemperature != null">
                water_temperature = #{waterTemperature,jdbcType=VARCHAR},
            </if>
            <if test="flowRate != null">
                flow_rate = #{flowRate,jdbcType=VARCHAR},
            </if>
            <if test="ph != null">
                ph = #{ph,jdbcType=VARCHAR},
            </if>
            <if test="ddl != null">
                ddl = #{ddl,jdbcType=VARCHAR},
            </if>
            <if test="rjy != null">
                rjy = #{rjy,jdbcType=VARCHAR},
            </if>
            <if test="rjyStd != null">
                rjy_std = #{rjyStd,jdbcType=VARCHAR},
            </if>
            <if test="gmsyzs != null">
                gmsyzs = #{gmsyzs,jdbcType=VARCHAR},
            </if>
            <if test="gmsyzsStd != null">
                gmsyzs_std = #{gmsyzsStd,jdbcType=VARCHAR},
            </if>
            <if test="shxyl != null">
                shxyl = #{shxyl,jdbcType=VARCHAR},
            </if>
            <if test="shxylStd != null">
                shxyl_std = #{shxylStd,jdbcType=VARCHAR},
            </if>
            <if test="ad != null">
                ad = #{ad,jdbcType=VARCHAR},
            </if>
            <if test="adStd != null">
                ad_std = #{adStd,jdbcType=VARCHAR},
            </if>
            <if test="syl != null">
                syl = #{syl,jdbcType=VARCHAR},
            </if>
            <if test="sylStd != null">
                syl_std = #{sylStd,jdbcType=VARCHAR},
            </if>
            <if test="hff != null">
                hff = #{hff,jdbcType=VARCHAR},
            </if>
            <if test="hffStd != null">
                hff_std = #{hffStd,jdbcType=VARCHAR},
            </if>
            <if test="gong != null">
                gong = #{gong,jdbcType=VARCHAR},
            </if>
            <if test="gongStd != null">
                gong_std = #{gongStd,jdbcType=VARCHAR},
            </if>
            <if test="qian != null">
                qian = #{qian,jdbcType=VARCHAR},
            </if>
            <if test="qianStd != null">
                qian_std = #{qianStd,jdbcType=VARCHAR},
            </if>
            <if test="hxxyl != null">
                hxxyl = #{hxxyl,jdbcType=VARCHAR},
            </if>
            <if test="hxxylStd != null">
                hxxyl_std = #{hxxylStd,jdbcType=VARCHAR},
            </if>
            <if test="zd != null">
                zd = #{zd,jdbcType=VARCHAR},
            </if>
            <if test="zdStd != null">
                zd_std = #{zdStd,jdbcType=VARCHAR},
            </if>
            <if test="zl != null">
                zl = #{zl,jdbcType=VARCHAR},
            </if>
            <if test="zlStd != null">
                zl_std = #{zlStd,jdbcType=VARCHAR},
            </if>
            <if test="tong != null">
                tong = #{tong,jdbcType=VARCHAR},
            </if>
            <if test="tongStd != null">
                tong_std = #{tongStd,jdbcType=VARCHAR},
            </if>
            <if test="xin != null">
                xin = #{xin,jdbcType=VARCHAR},
            </if>
            <if test="xinStd != null">
                xin_std = #{xinStd,jdbcType=VARCHAR},
            </if>
            <if test="qing != null">
                qing = #{qing,jdbcType=VARCHAR},
            </if>
            <if test="qingStd != null">
                qing_std = #{qingStd,jdbcType=VARCHAR},
            </if>
            <if test="xi != null">
                xi = #{xi,jdbcType=VARCHAR},
            </if>
            <if test="xiStd != null">
                xi_std = #{xiStd,jdbcType=VARCHAR},
            </if>
            <if test="shen != null">
                shen = #{shen,jdbcType=VARCHAR},
            </if>
            <if test="shenStd != null">
                shen_std = #{shenStd,jdbcType=VARCHAR},
            </if>
            <if test="ge != null">
                ge = #{ge,jdbcType=VARCHAR},
            </if>
            <if test="geStd != null">
                ge_std = #{geStd,jdbcType=VARCHAR},
            </if>
            <if test="ljg != null">
                ljg = #{ljg,jdbcType=VARCHAR},
            </if>
            <if test="ljgStd != null">
                ljg_std = #{ljgStd,jdbcType=VARCHAR},
            </if>
            <if test="qhw != null">
                qhw = #{qhw,jdbcType=VARCHAR},
            </if>
            <if test="qhwStd != null">
                qhw_std = #{qhwStd,jdbcType=VARCHAR},
            </if>
            <if test="ylzxdj != null">
                ylzxdj = #{ylzxdj,jdbcType=VARCHAR},
            </if>
            <if test="ylzxdjStd != null">
                ylzxdj_std = #{ylzxdjStd,jdbcType=VARCHAR},
            </if>
            <if test="lhw != null">
                lhw = #{lhw,jdbcType=VARCHAR},
            </if>
            <if test="lhwStd != null">
                lhw_std = #{lhwStd,jdbcType=VARCHAR},
            </if>
            <if test="fdcjq != null">
                fdcjq = #{fdcjq,jdbcType=VARCHAR},
            </if>
            <if test="fdcjqStd != null">
                fdcjq_std = #{fdcjqStd,jdbcType=VARCHAR},
            </if>
            <if test="qualityType != null">
                quality_type = #{qualityType,jdbcType=VARCHAR},
            </if>
            <if test="qualityTarget != null">
                quality_target = #{qualityTarget,jdbcType=VARCHAR},
            </if>
            <if test="cbyzjbs != null">
                cbyzjbs = #{cbyzjbs,jdbcType=VARCHAR},
            </if>
            <if test="comment != null">
                comment = #{comment,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.eliteams.quick4j.web.model.QmpWrxx">
		update qmp_wrxx
		set test_by = #{testBy,jdbcType=VARCHAR},
		river_name = #{riverName,jdbcType=VARCHAR},
		section_name = #{sectionName,jdbcType=VARCHAR},
		loc_province = #{locProvince,jdbcType=VARCHAR},
		" basin" = #{basin,jdbcType=VARCHAR},
		year = #{year,jdbcType=VARCHAR},
		month = #{month,jdbcType=VARCHAR},
		water_temperature = #{waterTemperature,jdbcType=VARCHAR},
		flow_rate = #{flowRate,jdbcType=VARCHAR},
		ph = #{ph,jdbcType=VARCHAR},
		ddl = #{ddl,jdbcType=VARCHAR},
		rjy = #{rjy,jdbcType=VARCHAR},
		rjy_std = #{rjyStd,jdbcType=VARCHAR},
		gmsyzs = #{gmsyzs,jdbcType=VARCHAR},
		gmsyzs_std = #{gmsyzsStd,jdbcType=VARCHAR},
		shxyl = #{shxyl,jdbcType=VARCHAR},
		shxyl_std = #{shxylStd,jdbcType=VARCHAR},
		ad = #{ad,jdbcType=VARCHAR},
		ad_std = #{adStd,jdbcType=VARCHAR},
		syl = #{syl,jdbcType=VARCHAR},
		syl_std = #{sylStd,jdbcType=VARCHAR},
		hff = #{hff,jdbcType=VARCHAR},
		hff_std = #{hffStd,jdbcType=VARCHAR},
		gong = #{gong,jdbcType=VARCHAR},
		gong_std = #{gongStd,jdbcType=VARCHAR},
		qian = #{qian,jdbcType=VARCHAR},
		qian_std = #{qianStd,jdbcType=VARCHAR},
		hxxyl = #{hxxyl,jdbcType=VARCHAR},
		hxxyl_std = #{hxxylStd,jdbcType=VARCHAR},
		zd = #{zd,jdbcType=VARCHAR},
		zd_std = #{zdStd,jdbcType=VARCHAR},
		zl = #{zl,jdbcType=VARCHAR},
		zl_std = #{zlStd,jdbcType=VARCHAR},
		tong = #{tong,jdbcType=VARCHAR},
		tong_std = #{tongStd,jdbcType=VARCHAR},
		xin = #{xin,jdbcType=VARCHAR},
		xin_std = #{xinStd,jdbcType=VARCHAR},
		qing = #{qing,jdbcType=VARCHAR},
		qing_std = #{qingStd,jdbcType=VARCHAR},
		xi = #{xi,jdbcType=VARCHAR},
		xi_std = #{xiStd,jdbcType=VARCHAR},
		shen = #{shen,jdbcType=VARCHAR},
		shen_std = #{shenStd,jdbcType=VARCHAR},
		ge = #{ge,jdbcType=VARCHAR},
		ge_std = #{geStd,jdbcType=VARCHAR},
		ljg = #{ljg,jdbcType=VARCHAR},
		ljg_std = #{ljgStd,jdbcType=VARCHAR},
		qhw = #{qhw,jdbcType=VARCHAR},
		qhw_std = #{qhwStd,jdbcType=VARCHAR},
		ylzxdj = #{ylzxdj,jdbcType=VARCHAR},
		ylzxdj_std = #{ylzxdjStd,jdbcType=VARCHAR},
		lhw = #{lhw,jdbcType=VARCHAR},
		lhw_std = #{lhwStd,jdbcType=VARCHAR},
		fdcjq = #{fdcjq,jdbcType=VARCHAR},
		fdcjq_std = #{fdcjqStd,jdbcType=VARCHAR},
		quality_type = #{qualityType,jdbcType=VARCHAR},
		quality_target = #{qualityTarget,jdbcType=VARCHAR},
		cbyzjbs = #{cbyzjbs,jdbcType=VARCHAR},
		comment = #{comment,jdbcType=VARCHAR}
		where id = #{id,jdbcType=INTEGER}
	</update>

    <select id="searchQmpWrxx" resultMap="BaseResultMap">
        select
        *
        from qmp_wrxx
        WHERE
        month = #{map.szsb_month} and
        <if test="map.test_by != null">
            test_by LIKE CONCAT('%', #{map.test_by}, '%') and
        </if>
        1=1
    </select>


    <sql id="qmpWrxxColumns">
		a.id,
		a.section_name,
		a.year,
		a.month,
		a.ad,
		a.zd,
		a.zl,
		a.hxxyl
	</sql>

    <resultMap id="newResult" type="com.eliteams.quick4j.web.model.QmpWrxx">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="section_name" jdbcType="VARCHAR" property="sectionName"/>
        <result column="year" jdbcType="VARCHAR" property="year"/>
        <result column="month" jdbcType="VARCHAR" property="month"/>
        <result column="ad" jdbcType="VARCHAR" property="ad"/>
        <result column="hxxyl" jdbcType="VARCHAR" property="hxxyl"/>
        <result column="zd" jdbcType="VARCHAR" property="zd"/>
        <result column="zl" jdbcType="VARCHAR" property="zl"/>
    </resultMap>

    <!--<select id="selectByExample" parameterType="com.eliteams.quick4j.web.model.QmpWrxxExample"-->
    <!--resultMap="BaseResultMap">-->
    <!--select-->
    <!--<if test="distinct">-->
    <!--distinct-->
    <!--</if>-->
    <!--'true' as QUERYID,-->
    <!--<include refid="Base_Column_List" />-->
    <!--from qmp_wrxx-->
    <!--<if test="_parameter != null">-->
    <!--<include refid="Example_Where_Clause" />-->
    <!--</if>-->
    <!--<if test="orderByClause != null">-->
    <!--order by ${orderByClause}-->
    <!--</if>-->
    <!--</select>-->

    <select id="getByTime" resultMap="newResult">
        SELECT
        <include refid="qmpWrxxColumns"/>
        FROM qmp_wrxx a
        WHERE
        a.year = #{year} AND
        a.section_name = #{sectionName}
        ORDER BY a.year DESC, a.month DESC
    </select>

    <select id="findList" resultMap="newResult">
        SELECT
        <include refid="qmpWrxxColumns"/>
        FROM qmp_wrxx a
        WHERE
        a.section_name = #{sectionName}
        ORDER BY a.year DESC, a.month DESC
    </select>

    <select id="findAllList" resultMap="newResult">
        SELECT
        <include refid="qmpWrxxColumns"/>
        FROM qmp_wrxx a
        WHERE
        a.section_name = #{sectionName}
        ORDER BY a.year DESC, a.month DESC
    </select>

    <select id="getSearchCount" resultMap="BaseResultMap" parameterType="java.util.Map">
        select
        *
        from qmp_wrxx
        <where>
            <choose>
                <when test="map.sections.size()!=0 and map.sections != null">
                    section_name IN
                    <foreach collection="map.sections" item="section_name" open="(" close=")" separator=",">
                        #{section_name}
                    </foreach>
                </when>
                <otherwise>
                    1=0
                </otherwise>
            </choose>
        </where>
        <trim>
            <if test="map.szsb_month!=null">
                AND month=#{map.szsb_month}
            </if>
        </trim>
    </select>

    <select id="searchByPage" resultMap="BaseResultMap">
        select
        *
        from qmp_wrxx
        <where>
            <choose>
                <when test="map.sections.size()!=0 and map.sections != null">
                    section_name IN
                    <foreach collection="map.sections" item="section_name" open="(" close=")" separator=",">
                        #{section_name}
                    </foreach>
                </when>
                <otherwise>
                    1=0
                </otherwise>
            </choose>
        </where>
        <trim>
            <if test="month!=null">
                AND month=#{map.szsb_month}
            </if>
        </trim>
        limit #{startPos},#{pageSize}
    </select>

    <select id="computeKzdmTotal_std" resultType="java.lang.String">
        select ${map.prop}
        from qmp_wrxx
        where
        <trim>
            <if test="map.kzdm != null">
                section_name = #{map.kzdm} and
            </if>
            section_name != ''
        </trim>
        limit 1

    </select>

    <select id="selectCuMianyuan" resultMap="BaseResultMap">
        SELECT id,test_by,section_name,year,month,(cast(flow_rate as DECIMAL(10,3))*cast(ad as DECIMAL(10,3))*2.592) as
        ad,
        (cast(flow_rate as DECIMAL(10,3))*cast(hxxyl as DECIMAL(10,3))*2.592) as hxxyl,
        (cast(flow_rate as DECIMAL(10,3))*cast(zl as DECIMAL(10,3))*2.592) as zl
        FROM qmp_wrxx
        WHERE
        <if test="map.loc_city != null">
            test_by LIKE CONCAT('%', #{map.loc_city}, '%') or
        </if>
        <if test="map.loc_city != null">
            test_by LIKE CONCAT('%', #{map.loc_county}, '%') AND
        </if>
        loc_province LIKE CONCAT('%', '辽宁', '%')
    </select>

    <select id="selectCuDianyuan" resultMap="BaseResultMap">
        SELECT section_name,sum(cast(flow_rate as DECIMAL(10,3))*cast(ad as DECIMAL(10,3)))*2.592/4 as
        ad,sum(cast(flow_rate as DECIMAL(10,3))*cast(hxxyl as DECIMAL(10,3)))*2.592/4 as hxxyl,sum(cast(flow_rate as
        DECIMAL(10,3))*cast(zl as DECIMAL(10,3)))*2.592/4 as zl
        FROM qmp_wrxx
        WHERE
        <if test="map.loc_city != null">
            test_by LIKE CONCAT('%', #{map.loc_city}, '%') or
        </if>
        <if test="map.loc_city != null">
            test_by LIKE CONCAT('%', #{map.loc_county}, '%') AND
        </if>
        loc_province LIKE CONCAT('%', '辽宁', '%')
        and (month = 12 or month = 1 or month = 2 or month = 3)
        group by section_name
    </select>
</mapper>
