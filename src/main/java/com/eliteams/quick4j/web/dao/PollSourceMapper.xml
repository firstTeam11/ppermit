<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.eliteams.quick4j.web.dao.PollSourceMapper">
  <resultMap id="BaseResultMap" type="com.eliteams.quick4j.web.model.PollSource">
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="XZQHDM" jdbcType="VARCHAR" property="xzqhdm" />
    <result column="XZQHMC" jdbcType="VARCHAR" property="xzqhmc" />
    <result column="TJNF" jdbcType="VARCHAR" property="tjnf" />
    <result column="ZZJGDM" jdbcType="VARCHAR" property="zzjgdm" />
    <result column="TBDWXXMC" jdbcType="VARCHAR" property="tbdwxxmc" />
    <result column="KZDY" jdbcType="VARCHAR" property="kzdy" />
    <result column="KZDM" jdbcType="VARCHAR" property="kzdm" />
    <result column="QYZT" jdbcType="VARCHAR" property="qyzt" />
    <result column="CYM" jdbcType="VARCHAR" property="cym" />
    <result column="XXDZDQ_S_Z_M" jdbcType="VARCHAR" property="xxdzdqSZM" />
    <result column="XXDZX_Q_S_Q" jdbcType="VARCHAR" property="xxdzxQSQ" />
    <result column="XXDZX_Z" jdbcType="VARCHAR" property="xxdzxZ" />
    <result column="XXDZJ_C_MPH" jdbcType="VARCHAR" property="xxdzjCMph" />
    <result column="ZXJD_D" jdbcType="VARCHAR" property="zxjdD" />
    <result column="ZXJD_F" jdbcType="VARCHAR" property="zxjdF" />
    <result column="ZXJD_M" jdbcType="VARCHAR" property="zxjdM" />
    <result column="JD_G" jdbcType="VARCHAR" property="jdG" />
    <result column="JD_ZCXD" jdbcType="VARCHAR" property="jdZcxd" />
    <result column="ZXWD_D" jdbcType="VARCHAR" property="zxwdD" />
    <result column="ZXWD_F" jdbcType="VARCHAR" property="zxwdF" />
    <result column="ZXWD_M" jdbcType="VARCHAR" property="zxwdM" />
    <result column="WD_G" jdbcType="VARCHAR" property="wdG" />
    <result column="WD_ZCXD" jdbcType="VARCHAR" property="wdZcxd" />
    <result column="DJZCLX" jdbcType="VARCHAR" property="djzclx" />
    <result column="QYGM" jdbcType="VARCHAR" property="qygm" />
    <result column="SSJTGS" jdbcType="VARCHAR" property="ssjtgs" />
    <result column="XYLBDM" jdbcType="VARCHAR" property="xylbdm" />
    <result column="XYLBMC" jdbcType="VARCHAR" property="xylbmc" />
    <result column="KYSJ_Y" jdbcType="VARCHAR" property="kysjY" />
    <result column="KYSJ_N" jdbcType="VARCHAR" property="kysjN" />
    <result column="SZLYDM" jdbcType="VARCHAR" property="szlydm" />
    <result column="SZLYMC" jdbcType="VARCHAR" property="szlymc" />
    <result column="PSQXDM" jdbcType="VARCHAR" property="psqxdm" />
    <result column="PSQXLX" jdbcType="VARCHAR" property="psqxlx" />
    <result column="PRDWSCLCDM" jdbcType="VARCHAR" property="prdwsclcdm" />
    <result column="PRDWSCLCMC" jdbcType="VARCHAR" property="prdwsclcmc" />
    <result column="SNSTDM" jdbcType="VARCHAR" property="snstdm" />
    <result column="SNSTMC" jdbcType="VARCHAR" property="snstmc" />
    <result column="GYZCZ_DNJG_WY" jdbcType="VARCHAR" property="gyzczDnjgWy" />
    <result column="NZCSCSJ_XS" jdbcType="VARCHAR" property="nzcscsjXs" />
    <result column="GYYSL_D" jdbcType="VARCHAR" property="gyyslD" />
    <result column="QZ_QSL_D" jdbcType="VARCHAR" property="qzQslD" />
    <result column="QZ_ZFYSL_D" jdbcType="VARCHAR" property="qzZfyslD" />
    <result column="ZYYFCLYL1" jdbcType="VARCHAR" property="zyyfclyl1" />
    <result column="ZYYFCLYL_JLDW1" jdbcType="VARCHAR" property="zyyfclylJldw1" />
    <result column="ZYYFCLYL_BNSJ1" jdbcType="VARCHAR" property="zyyfclylBnsj1" />
    <result column="ZYYFCLYL2" jdbcType="VARCHAR" property="zyyfclyl2" />
    <result column="ZYYFCLYL_JLDW2" jdbcType="VARCHAR" property="zyyfclylJldw2" />
    <result column="ZYYFCLYL_BNSJ2" jdbcType="VARCHAR" property="zyyfclylBnsj2" />
    <result column="ZYYFCLYL3" jdbcType="VARCHAR" property="zyyfclyl3" />
    <result column="ZYYFCLYL_JLDW3" jdbcType="VARCHAR" property="zyyfclylJldw3" />
    <result column="ZYYFCLYL_BNSJ3" jdbcType="VARCHAR" property="zyyfclylBnsj3" />
    <result column="ZYCPSCQK1" jdbcType="VARCHAR" property="zycpscqk1" />
    <result column="ZYCPSCQK_JLDW1" jdbcType="VARCHAR" property="zycpscqkJldw1" />
    <result column="ZYCPSCQK_BNSJ1" jdbcType="VARCHAR" property="zycpscqkBnsj1" />
    <result column="ZYCPSCQK2" jdbcType="VARCHAR" property="zycpscqk2" />
    <result column="ZYCPSCQK_JLDW2" jdbcType="VARCHAR" property="zycpscqkJldw2" />
    <result column="ZYCPSCQK_BNSJ2" jdbcType="VARCHAR" property="zycpscqkBnsj2" />
    <result column="ZYCPSCQK3" jdbcType="VARCHAR" property="zycpscqk3" />
    <result column="ZYCPSCQK_JLDW3" jdbcType="VARCHAR" property="zycpscqkJldw3" />
    <result column="ZYCPSCQK_BNSJ3" jdbcType="VARCHAR" property="zycpscqkBnsj3" />
    <result column="FSZLSSS_T" jdbcType="VARCHAR" property="fszlsssT" />
    <result column="FSZLSSCLNL_D_R" jdbcType="VARCHAR" property="fszlssclnlDR" />
    <result column="FSZLSSYXFY_WY" jdbcType="VARCHAR" property="fszlssyxfyWy" />
    <result column="GYFSCLL_D" jdbcType="VARCHAR" property="gyfscllD" />
    <result column="GYFSPFL_D" jdbcType="VARCHAR" property="gyfspflD" />
    <result column="QZ_ZJPRHJD_D" jdbcType="VARCHAR" property="qzZjprhjdD" />
    <result column="QZ_PRWSCLCD_D" jdbcType="VARCHAR" property="qzPrwsclcdD" />
    <result column="PRWSCLCDHXXYLND_HK_S" jdbcType="VARCHAR" property="prwsclcdhxxylndHkS" />
    <result column="PRWSCLCDADND_HK_S" jdbcType="VARCHAR" property="prwsclcdadndHkS" />
    <result column="PRWSCLCDSYLND_HK_S" jdbcType="VARCHAR" property="prwsclcdsylndHkS" />
    <result column="HXXYLCSL_D" jdbcType="VARCHAR" property="hxxylcslD" />
    <result column="HXXYLPFL_D" jdbcType="VARCHAR" property="hxxylpflD" />
    <result column="ADCSL_D" jdbcType="VARCHAR" property="adcslD" />
    <result column="ADPFL_D" jdbcType="VARCHAR" property="adpflD" />
    <result column="SYLCSL_D" jdbcType="VARCHAR" property="sylcslD" />
    <result column="SYLPFL_D" jdbcType="VARCHAR" property="sylpflD" />
    <result column="HFFCSL_QK" jdbcType="VARCHAR" property="hffcslQk" />
    <result column="HFFPFL_QK" jdbcType="VARCHAR" property="hffpflQk" />
    <result column="QHWCSL_QK" jdbcType="VARCHAR" property="qhwcslQk" />
    <result column="QHWPFL_QK" jdbcType="VARCHAR" property="qhwpflQk" />
    <result column="FSSCSL_QK" jdbcType="VARCHAR" property="fsscslQk" />
    <result column="FSSPFL_QK" jdbcType="VARCHAR" property="fsspflQk" />
    <result column="FSQCSL_QK" jdbcType="VARCHAR" property="fsqcslQk" />
    <result column="FSQPFL_QK" jdbcType="VARCHAR" property="fsqpflQk" />
    <result column="FSGCSL_QK" jdbcType="VARCHAR" property="fsgcslQk" />
    <result column="FSGPFL_QK" jdbcType="VARCHAR" property="fsgpflQk" />
    <result column="FSGCSL_QK_DUP1" jdbcType="VARCHAR" property="fsgcslQkDup1" />
    <result column="FSGPFL_QK_DUP1" jdbcType="VARCHAR" property="fsgpflQkDup1" />
    <result column="FSZGCSL_QK" jdbcType="VARCHAR" property="fszgcslQk" />
    <result column="FSZGPFL_QK" jdbcType="VARCHAR" property="fszgpflQk" />
    <result column="FSLJGCSL_QK" jdbcType="VARCHAR" property="fsljgcslQk" />
    <result column="FSLJGPFL_QK" jdbcType="VARCHAR" property="fsljgpflQk" />
    <result column="is_del" jdbcType="INTEGER" property="isDel" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    ID, XZQHDM, XZQHMC, TJNF, ZZJGDM, TBDWXXMC, KZDY, KZDM, QYZT, CYM, XXDZDQ_S_Z_M, 
    XXDZX_Q_S_Q, XXDZX_Z, XXDZJ_C_MPH, ZXJD_D, ZXJD_F, ZXJD_M, JD_G, JD_ZCXD, ZXWD_D, 
    ZXWD_F, ZXWD_M, WD_G, WD_ZCXD, DJZCLX, QYGM, SSJTGS, XYLBDM, XYLBMC, KYSJ_Y, KYSJ_N, 
    SZLYDM, SZLYMC, PSQXDM, PSQXLX, PRDWSCLCDM, PRDWSCLCMC, SNSTDM, SNSTMC, GYZCZ_DNJG_WY, 
    NZCSCSJ_XS, GYYSL_D, QZ_QSL_D, QZ_ZFYSL_D, ZYYFCLYL1, ZYYFCLYL_JLDW1, ZYYFCLYL_BNSJ1, 
    ZYYFCLYL2, ZYYFCLYL_JLDW2, ZYYFCLYL_BNSJ2, ZYYFCLYL3, ZYYFCLYL_JLDW3, ZYYFCLYL_BNSJ3, 
    ZYCPSCQK1, ZYCPSCQK_JLDW1, ZYCPSCQK_BNSJ1, ZYCPSCQK2, ZYCPSCQK_JLDW2, ZYCPSCQK_BNSJ2, 
    ZYCPSCQK3, ZYCPSCQK_JLDW3, ZYCPSCQK_BNSJ3, FSZLSSS_T, FSZLSSCLNL_D_R, FSZLSSYXFY_WY, 
    GYFSCLL_D, GYFSPFL_D, QZ_ZJPRHJD_D, QZ_PRWSCLCD_D, PRWSCLCDHXXYLND_HK_S, PRWSCLCDADND_HK_S, 
    PRWSCLCDSYLND_HK_S, HXXYLCSL_D, HXXYLPFL_D, ADCSL_D, ADPFL_D, SYLCSL_D, SYLPFL_D, 
    HFFCSL_QK, HFFPFL_QK, QHWCSL_QK, QHWPFL_QK, FSSCSL_QK, FSSPFL_QK, FSQCSL_QK, FSQPFL_QK, 
    FSGCSL_QK, FSGPFL_QK, FSGCSL_QK_DUP1, FSGPFL_QK_DUP1, FSZGCSL_QK, FSZGPFL_QK, FSLJGCSL_QK, 
    FSLJGPFL_QK, is_del
  </sql>
  <select id="selectByExample" parameterType="com.eliteams.quick4j.web.model.PollSourceExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from pollution
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from pollution
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from pollution
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.eliteams.quick4j.web.model.PollSourceExample">
    delete from pollution
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.eliteams.quick4j.web.model.PollSource">
    insert into pollution (ID, XZQHDM, XZQHMC, 
      TJNF, ZZJGDM, TBDWXXMC, 
      KZDY, KZDM, QYZT, CYM, 
      XXDZDQ_S_Z_M, XXDZX_Q_S_Q, XXDZX_Z, 
      XXDZJ_C_MPH, ZXJD_D, ZXJD_F, 
      ZXJD_M, JD_G, JD_ZCXD, 
      ZXWD_D, ZXWD_F, ZXWD_M, 
      WD_G, WD_ZCXD, DJZCLX, 
      QYGM, SSJTGS, XYLBDM, 
      XYLBMC, KYSJ_Y, KYSJ_N, 
      SZLYDM, SZLYMC, PSQXDM, 
      PSQXLX, PRDWSCLCDM, PRDWSCLCMC, 
      SNSTDM, SNSTMC, GYZCZ_DNJG_WY, 
      NZCSCSJ_XS, GYYSL_D, QZ_QSL_D, 
      QZ_ZFYSL_D, ZYYFCLYL1, ZYYFCLYL_JLDW1, 
      ZYYFCLYL_BNSJ1, ZYYFCLYL2, ZYYFCLYL_JLDW2, 
      ZYYFCLYL_BNSJ2, ZYYFCLYL3, ZYYFCLYL_JLDW3, 
      ZYYFCLYL_BNSJ3, ZYCPSCQK1, ZYCPSCQK_JLDW1, 
      ZYCPSCQK_BNSJ1, ZYCPSCQK2, ZYCPSCQK_JLDW2, 
      ZYCPSCQK_BNSJ2, ZYCPSCQK3, ZYCPSCQK_JLDW3, 
      ZYCPSCQK_BNSJ3, FSZLSSS_T, FSZLSSCLNL_D_R, 
      FSZLSSYXFY_WY, GYFSCLL_D, GYFSPFL_D, 
      QZ_ZJPRHJD_D, QZ_PRWSCLCD_D, PRWSCLCDHXXYLND_HK_S, 
      PRWSCLCDADND_HK_S, PRWSCLCDSYLND_HK_S, HXXYLCSL_D, 
      HXXYLPFL_D, ADCSL_D, ADPFL_D, 
      SYLCSL_D, SYLPFL_D, HFFCSL_QK, 
      HFFPFL_QK, QHWCSL_QK, QHWPFL_QK, 
      FSSCSL_QK, FSSPFL_QK, FSQCSL_QK, 
      FSQPFL_QK, FSGCSL_QK, FSGPFL_QK, 
      FSGCSL_QK_DUP1, FSGPFL_QK_DUP1, FSZGCSL_QK, 
      FSZGPFL_QK, FSLJGCSL_QK, FSLJGPFL_QK, 
      is_del)
    values (#{id,jdbcType=INTEGER}, #{xzqhdm,jdbcType=VARCHAR}, #{xzqhmc,jdbcType=VARCHAR}, 
      #{tjnf,jdbcType=VARCHAR}, #{zzjgdm,jdbcType=VARCHAR}, #{tbdwxxmc,jdbcType=VARCHAR}, 
      #{kzdy,jdbcType=VARCHAR}, #{kzdm,jdbcType=VARCHAR}, #{qyzt,jdbcType=VARCHAR}, #{cym,jdbcType=VARCHAR}, 
      #{xxdzdqSZM,jdbcType=VARCHAR}, #{xxdzxQSQ,jdbcType=VARCHAR}, #{xxdzxZ,jdbcType=VARCHAR}, 
      #{xxdzjCMph,jdbcType=VARCHAR}, #{zxjdD,jdbcType=VARCHAR}, #{zxjdF,jdbcType=VARCHAR}, 
      #{zxjdM,jdbcType=VARCHAR}, #{jdG,jdbcType=VARCHAR}, #{jdZcxd,jdbcType=VARCHAR}, 
      #{zxwdD,jdbcType=VARCHAR}, #{zxwdF,jdbcType=VARCHAR}, #{zxwdM,jdbcType=VARCHAR}, 
      #{wdG,jdbcType=VARCHAR}, #{wdZcxd,jdbcType=VARCHAR}, #{djzclx,jdbcType=VARCHAR}, 
      #{qygm,jdbcType=VARCHAR}, #{ssjtgs,jdbcType=VARCHAR}, #{xylbdm,jdbcType=VARCHAR}, 
      #{xylbmc,jdbcType=VARCHAR}, #{kysjY,jdbcType=VARCHAR}, #{kysjN,jdbcType=VARCHAR}, 
      #{szlydm,jdbcType=VARCHAR}, #{szlymc,jdbcType=VARCHAR}, #{psqxdm,jdbcType=VARCHAR}, 
      #{psqxlx,jdbcType=VARCHAR}, #{prdwsclcdm,jdbcType=VARCHAR}, #{prdwsclcmc,jdbcType=VARCHAR}, 
      #{snstdm,jdbcType=VARCHAR}, #{snstmc,jdbcType=VARCHAR}, #{gyzczDnjgWy,jdbcType=VARCHAR}, 
      #{nzcscsjXs,jdbcType=VARCHAR}, #{gyyslD,jdbcType=VARCHAR}, #{qzQslD,jdbcType=VARCHAR}, 
      #{qzZfyslD,jdbcType=VARCHAR}, #{zyyfclyl1,jdbcType=VARCHAR}, #{zyyfclylJldw1,jdbcType=VARCHAR}, 
      #{zyyfclylBnsj1,jdbcType=VARCHAR}, #{zyyfclyl2,jdbcType=VARCHAR}, #{zyyfclylJldw2,jdbcType=VARCHAR}, 
      #{zyyfclylBnsj2,jdbcType=VARCHAR}, #{zyyfclyl3,jdbcType=VARCHAR}, #{zyyfclylJldw3,jdbcType=VARCHAR}, 
      #{zyyfclylBnsj3,jdbcType=VARCHAR}, #{zycpscqk1,jdbcType=VARCHAR}, #{zycpscqkJldw1,jdbcType=VARCHAR}, 
      #{zycpscqkBnsj1,jdbcType=VARCHAR}, #{zycpscqk2,jdbcType=VARCHAR}, #{zycpscqkJldw2,jdbcType=VARCHAR}, 
      #{zycpscqkBnsj2,jdbcType=VARCHAR}, #{zycpscqk3,jdbcType=VARCHAR}, #{zycpscqkJldw3,jdbcType=VARCHAR}, 
      #{zycpscqkBnsj3,jdbcType=VARCHAR}, #{fszlsssT,jdbcType=VARCHAR}, #{fszlssclnlDR,jdbcType=VARCHAR}, 
      #{fszlssyxfyWy,jdbcType=VARCHAR}, #{gyfscllD,jdbcType=VARCHAR}, #{gyfspflD,jdbcType=VARCHAR}, 
      #{qzZjprhjdD,jdbcType=VARCHAR}, #{qzPrwsclcdD,jdbcType=VARCHAR}, #{prwsclcdhxxylndHkS,jdbcType=VARCHAR}, 
      #{prwsclcdadndHkS,jdbcType=VARCHAR}, #{prwsclcdsylndHkS,jdbcType=VARCHAR}, #{hxxylcslD,jdbcType=VARCHAR}, 
      #{hxxylpflD,jdbcType=VARCHAR}, #{adcslD,jdbcType=VARCHAR}, #{adpflD,jdbcType=VARCHAR}, 
      #{sylcslD,jdbcType=VARCHAR}, #{sylpflD,jdbcType=VARCHAR}, #{hffcslQk,jdbcType=VARCHAR}, 
      #{hffpflQk,jdbcType=VARCHAR}, #{qhwcslQk,jdbcType=VARCHAR}, #{qhwpflQk,jdbcType=VARCHAR}, 
      #{fsscslQk,jdbcType=VARCHAR}, #{fsspflQk,jdbcType=VARCHAR}, #{fsqcslQk,jdbcType=VARCHAR}, 
      #{fsqpflQk,jdbcType=VARCHAR}, #{fsgcslQk,jdbcType=VARCHAR}, #{fsgpflQk,jdbcType=VARCHAR}, 
      #{fsgcslQkDup1,jdbcType=VARCHAR}, #{fsgpflQkDup1,jdbcType=VARCHAR}, #{fszgcslQk,jdbcType=VARCHAR}, 
      #{fszgpflQk,jdbcType=VARCHAR}, #{fsljgcslQk,jdbcType=VARCHAR}, #{fsljgpflQk,jdbcType=VARCHAR}, 
      #{isDel,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.eliteams.quick4j.web.model.PollSource">
    insert into pollution
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="xzqhdm != null">
        XZQHDM,
      </if>
      <if test="xzqhmc != null">
        XZQHMC,
      </if>
      <if test="tjnf != null">
        TJNF,
      </if>
      <if test="zzjgdm != null">
        ZZJGDM,
      </if>
      <if test="tbdwxxmc != null">
        TBDWXXMC,
      </if>
      <if test="kzdy != null">
        KZDY,
      </if>
      <if test="kzdm != null">
        KZDM,
      </if>
      <if test="qyzt != null">
        QYZT,
      </if>
      <if test="cym != null">
        CYM,
      </if>
      <if test="xxdzdqSZM != null">
        XXDZDQ_S_Z_M,
      </if>
      <if test="xxdzxQSQ != null">
        XXDZX_Q_S_Q,
      </if>
      <if test="xxdzxZ != null">
        XXDZX_Z,
      </if>
      <if test="xxdzjCMph != null">
        XXDZJ_C_MPH,
      </if>
      <if test="zxjdD != null">
        ZXJD_D,
      </if>
      <if test="zxjdF != null">
        ZXJD_F,
      </if>
      <if test="zxjdM != null">
        ZXJD_M,
      </if>
      <if test="jdG != null">
        JD_G,
      </if>
      <if test="jdZcxd != null">
        JD_ZCXD,
      </if>
      <if test="zxwdD != null">
        ZXWD_D,
      </if>
      <if test="zxwdF != null">
        ZXWD_F,
      </if>
      <if test="zxwdM != null">
        ZXWD_M,
      </if>
      <if test="wdG != null">
        WD_G,
      </if>
      <if test="wdZcxd != null">
        WD_ZCXD,
      </if>
      <if test="djzclx != null">
        DJZCLX,
      </if>
      <if test="qygm != null">
        QYGM,
      </if>
      <if test="ssjtgs != null">
        SSJTGS,
      </if>
      <if test="xylbdm != null">
        XYLBDM,
      </if>
      <if test="xylbmc != null">
        XYLBMC,
      </if>
      <if test="kysjY != null">
        KYSJ_Y,
      </if>
      <if test="kysjN != null">
        KYSJ_N,
      </if>
      <if test="szlydm != null">
        SZLYDM,
      </if>
      <if test="szlymc != null">
        SZLYMC,
      </if>
      <if test="psqxdm != null">
        PSQXDM,
      </if>
      <if test="psqxlx != null">
        PSQXLX,
      </if>
      <if test="prdwsclcdm != null">
        PRDWSCLCDM,
      </if>
      <if test="prdwsclcmc != null">
        PRDWSCLCMC,
      </if>
      <if test="snstdm != null">
        SNSTDM,
      </if>
      <if test="snstmc != null">
        SNSTMC,
      </if>
      <if test="gyzczDnjgWy != null">
        GYZCZ_DNJG_WY,
      </if>
      <if test="nzcscsjXs != null">
        NZCSCSJ_XS,
      </if>
      <if test="gyyslD != null">
        GYYSL_D,
      </if>
      <if test="qzQslD != null">
        QZ_QSL_D,
      </if>
      <if test="qzZfyslD != null">
        QZ_ZFYSL_D,
      </if>
      <if test="zyyfclyl1 != null">
        ZYYFCLYL1,
      </if>
      <if test="zyyfclylJldw1 != null">
        ZYYFCLYL_JLDW1,
      </if>
      <if test="zyyfclylBnsj1 != null">
        ZYYFCLYL_BNSJ1,
      </if>
      <if test="zyyfclyl2 != null">
        ZYYFCLYL2,
      </if>
      <if test="zyyfclylJldw2 != null">
        ZYYFCLYL_JLDW2,
      </if>
      <if test="zyyfclylBnsj2 != null">
        ZYYFCLYL_BNSJ2,
      </if>
      <if test="zyyfclyl3 != null">
        ZYYFCLYL3,
      </if>
      <if test="zyyfclylJldw3 != null">
        ZYYFCLYL_JLDW3,
      </if>
      <if test="zyyfclylBnsj3 != null">
        ZYYFCLYL_BNSJ3,
      </if>
      <if test="zycpscqk1 != null">
        ZYCPSCQK1,
      </if>
      <if test="zycpscqkJldw1 != null">
        ZYCPSCQK_JLDW1,
      </if>
      <if test="zycpscqkBnsj1 != null">
        ZYCPSCQK_BNSJ1,
      </if>
      <if test="zycpscqk2 != null">
        ZYCPSCQK2,
      </if>
      <if test="zycpscqkJldw2 != null">
        ZYCPSCQK_JLDW2,
      </if>
      <if test="zycpscqkBnsj2 != null">
        ZYCPSCQK_BNSJ2,
      </if>
      <if test="zycpscqk3 != null">
        ZYCPSCQK3,
      </if>
      <if test="zycpscqkJldw3 != null">
        ZYCPSCQK_JLDW3,
      </if>
      <if test="zycpscqkBnsj3 != null">
        ZYCPSCQK_BNSJ3,
      </if>
      <if test="fszlsssT != null">
        FSZLSSS_T,
      </if>
      <if test="fszlssclnlDR != null">
        FSZLSSCLNL_D_R,
      </if>
      <if test="fszlssyxfyWy != null">
        FSZLSSYXFY_WY,
      </if>
      <if test="gyfscllD != null">
        GYFSCLL_D,
      </if>
      <if test="gyfspflD != null">
        GYFSPFL_D,
      </if>
      <if test="qzZjprhjdD != null">
        QZ_ZJPRHJD_D,
      </if>
      <if test="qzPrwsclcdD != null">
        QZ_PRWSCLCD_D,
      </if>
      <if test="prwsclcdhxxylndHkS != null">
        PRWSCLCDHXXYLND_HK_S,
      </if>
      <if test="prwsclcdadndHkS != null">
        PRWSCLCDADND_HK_S,
      </if>
      <if test="prwsclcdsylndHkS != null">
        PRWSCLCDSYLND_HK_S,
      </if>
      <if test="hxxylcslD != null">
        HXXYLCSL_D,
      </if>
      <if test="hxxylpflD != null">
        HXXYLPFL_D,
      </if>
      <if test="adcslD != null">
        ADCSL_D,
      </if>
      <if test="adpflD != null">
        ADPFL_D,
      </if>
      <if test="sylcslD != null">
        SYLCSL_D,
      </if>
      <if test="sylpflD != null">
        SYLPFL_D,
      </if>
      <if test="hffcslQk != null">
        HFFCSL_QK,
      </if>
      <if test="hffpflQk != null">
        HFFPFL_QK,
      </if>
      <if test="qhwcslQk != null">
        QHWCSL_QK,
      </if>
      <if test="qhwpflQk != null">
        QHWPFL_QK,
      </if>
      <if test="fsscslQk != null">
        FSSCSL_QK,
      </if>
      <if test="fsspflQk != null">
        FSSPFL_QK,
      </if>
      <if test="fsqcslQk != null">
        FSQCSL_QK,
      </if>
      <if test="fsqpflQk != null">
        FSQPFL_QK,
      </if>
      <if test="fsgcslQk != null">
        FSGCSL_QK,
      </if>
      <if test="fsgpflQk != null">
        FSGPFL_QK,
      </if>
      <if test="fsgcslQkDup1 != null">
        FSGCSL_QK_DUP1,
      </if>
      <if test="fsgpflQkDup1 != null">
        FSGPFL_QK_DUP1,
      </if>
      <if test="fszgcslQk != null">
        FSZGCSL_QK,
      </if>
      <if test="fszgpflQk != null">
        FSZGPFL_QK,
      </if>
      <if test="fsljgcslQk != null">
        FSLJGCSL_QK,
      </if>
      <if test="fsljgpflQk != null">
        FSLJGPFL_QK,
      </if>
      <if test="isDel != null">
        is_del,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="xzqhdm != null">
        #{xzqhdm,jdbcType=VARCHAR},
      </if>
      <if test="xzqhmc != null">
        #{xzqhmc,jdbcType=VARCHAR},
      </if>
      <if test="tjnf != null">
        #{tjnf,jdbcType=VARCHAR},
      </if>
      <if test="zzjgdm != null">
        #{zzjgdm,jdbcType=VARCHAR},
      </if>
      <if test="tbdwxxmc != null">
        #{tbdwxxmc,jdbcType=VARCHAR},
      </if>
      <if test="kzdy != null">
        #{kzdy,jdbcType=VARCHAR},
      </if>
      <if test="kzdm != null">
        #{kzdm,jdbcType=VARCHAR},
      </if>
      <if test="qyzt != null">
        #{qyzt,jdbcType=VARCHAR},
      </if>
      <if test="cym != null">
        #{cym,jdbcType=VARCHAR},
      </if>
      <if test="xxdzdqSZM != null">
        #{xxdzdqSZM,jdbcType=VARCHAR},
      </if>
      <if test="xxdzxQSQ != null">
        #{xxdzxQSQ,jdbcType=VARCHAR},
      </if>
      <if test="xxdzxZ != null">
        #{xxdzxZ,jdbcType=VARCHAR},
      </if>
      <if test="xxdzjCMph != null">
        #{xxdzjCMph,jdbcType=VARCHAR},
      </if>
      <if test="zxjdD != null">
        #{zxjdD,jdbcType=VARCHAR},
      </if>
      <if test="zxjdF != null">
        #{zxjdF,jdbcType=VARCHAR},
      </if>
      <if test="zxjdM != null">
        #{zxjdM,jdbcType=VARCHAR},
      </if>
      <if test="jdG != null">
        #{jdG,jdbcType=VARCHAR},
      </if>
      <if test="jdZcxd != null">
        #{jdZcxd,jdbcType=VARCHAR},
      </if>
      <if test="zxwdD != null">
        #{zxwdD,jdbcType=VARCHAR},
      </if>
      <if test="zxwdF != null">
        #{zxwdF,jdbcType=VARCHAR},
      </if>
      <if test="zxwdM != null">
        #{zxwdM,jdbcType=VARCHAR},
      </if>
      <if test="wdG != null">
        #{wdG,jdbcType=VARCHAR},
      </if>
      <if test="wdZcxd != null">
        #{wdZcxd,jdbcType=VARCHAR},
      </if>
      <if test="djzclx != null">
        #{djzclx,jdbcType=VARCHAR},
      </if>
      <if test="qygm != null">
        #{qygm,jdbcType=VARCHAR},
      </if>
      <if test="ssjtgs != null">
        #{ssjtgs,jdbcType=VARCHAR},
      </if>
      <if test="xylbdm != null">
        #{xylbdm,jdbcType=VARCHAR},
      </if>
      <if test="xylbmc != null">
        #{xylbmc,jdbcType=VARCHAR},
      </if>
      <if test="kysjY != null">
        #{kysjY,jdbcType=VARCHAR},
      </if>
      <if test="kysjN != null">
        #{kysjN,jdbcType=VARCHAR},
      </if>
      <if test="szlydm != null">
        #{szlydm,jdbcType=VARCHAR},
      </if>
      <if test="szlymc != null">
        #{szlymc,jdbcType=VARCHAR},
      </if>
      <if test="psqxdm != null">
        #{psqxdm,jdbcType=VARCHAR},
      </if>
      <if test="psqxlx != null">
        #{psqxlx,jdbcType=VARCHAR},
      </if>
      <if test="prdwsclcdm != null">
        #{prdwsclcdm,jdbcType=VARCHAR},
      </if>
      <if test="prdwsclcmc != null">
        #{prdwsclcmc,jdbcType=VARCHAR},
      </if>
      <if test="snstdm != null">
        #{snstdm,jdbcType=VARCHAR},
      </if>
      <if test="snstmc != null">
        #{snstmc,jdbcType=VARCHAR},
      </if>
      <if test="gyzczDnjgWy != null">
        #{gyzczDnjgWy,jdbcType=VARCHAR},
      </if>
      <if test="nzcscsjXs != null">
        #{nzcscsjXs,jdbcType=VARCHAR},
      </if>
      <if test="gyyslD != null">
        #{gyyslD,jdbcType=VARCHAR},
      </if>
      <if test="qzQslD != null">
        #{qzQslD,jdbcType=VARCHAR},
      </if>
      <if test="qzZfyslD != null">
        #{qzZfyslD,jdbcType=VARCHAR},
      </if>
      <if test="zyyfclyl1 != null">
        #{zyyfclyl1,jdbcType=VARCHAR},
      </if>
      <if test="zyyfclylJldw1 != null">
        #{zyyfclylJldw1,jdbcType=VARCHAR},
      </if>
      <if test="zyyfclylBnsj1 != null">
        #{zyyfclylBnsj1,jdbcType=VARCHAR},
      </if>
      <if test="zyyfclyl2 != null">
        #{zyyfclyl2,jdbcType=VARCHAR},
      </if>
      <if test="zyyfclylJldw2 != null">
        #{zyyfclylJldw2,jdbcType=VARCHAR},
      </if>
      <if test="zyyfclylBnsj2 != null">
        #{zyyfclylBnsj2,jdbcType=VARCHAR},
      </if>
      <if test="zyyfclyl3 != null">
        #{zyyfclyl3,jdbcType=VARCHAR},
      </if>
      <if test="zyyfclylJldw3 != null">
        #{zyyfclylJldw3,jdbcType=VARCHAR},
      </if>
      <if test="zyyfclylBnsj3 != null">
        #{zyyfclylBnsj3,jdbcType=VARCHAR},
      </if>
      <if test="zycpscqk1 != null">
        #{zycpscqk1,jdbcType=VARCHAR},
      </if>
      <if test="zycpscqkJldw1 != null">
        #{zycpscqkJldw1,jdbcType=VARCHAR},
      </if>
      <if test="zycpscqkBnsj1 != null">
        #{zycpscqkBnsj1,jdbcType=VARCHAR},
      </if>
      <if test="zycpscqk2 != null">
        #{zycpscqk2,jdbcType=VARCHAR},
      </if>
      <if test="zycpscqkJldw2 != null">
        #{zycpscqkJldw2,jdbcType=VARCHAR},
      </if>
      <if test="zycpscqkBnsj2 != null">
        #{zycpscqkBnsj2,jdbcType=VARCHAR},
      </if>
      <if test="zycpscqk3 != null">
        #{zycpscqk3,jdbcType=VARCHAR},
      </if>
      <if test="zycpscqkJldw3 != null">
        #{zycpscqkJldw3,jdbcType=VARCHAR},
      </if>
      <if test="zycpscqkBnsj3 != null">
        #{zycpscqkBnsj3,jdbcType=VARCHAR},
      </if>
      <if test="fszlsssT != null">
        #{fszlsssT,jdbcType=VARCHAR},
      </if>
      <if test="fszlssclnlDR != null">
        #{fszlssclnlDR,jdbcType=VARCHAR},
      </if>
      <if test="fszlssyxfyWy != null">
        #{fszlssyxfyWy,jdbcType=VARCHAR},
      </if>
      <if test="gyfscllD != null">
        #{gyfscllD,jdbcType=VARCHAR},
      </if>
      <if test="gyfspflD != null">
        #{gyfspflD,jdbcType=VARCHAR},
      </if>
      <if test="qzZjprhjdD != null">
        #{qzZjprhjdD,jdbcType=VARCHAR},
      </if>
      <if test="qzPrwsclcdD != null">
        #{qzPrwsclcdD,jdbcType=VARCHAR},
      </if>
      <if test="prwsclcdhxxylndHkS != null">
        #{prwsclcdhxxylndHkS,jdbcType=VARCHAR},
      </if>
      <if test="prwsclcdadndHkS != null">
        #{prwsclcdadndHkS,jdbcType=VARCHAR},
      </if>
      <if test="prwsclcdsylndHkS != null">
        #{prwsclcdsylndHkS,jdbcType=VARCHAR},
      </if>
      <if test="hxxylcslD != null">
        #{hxxylcslD,jdbcType=VARCHAR},
      </if>
      <if test="hxxylpflD != null">
        #{hxxylpflD,jdbcType=VARCHAR},
      </if>
      <if test="adcslD != null">
        #{adcslD,jdbcType=VARCHAR},
      </if>
      <if test="adpflD != null">
        #{adpflD,jdbcType=VARCHAR},
      </if>
      <if test="sylcslD != null">
        #{sylcslD,jdbcType=VARCHAR},
      </if>
      <if test="sylpflD != null">
        #{sylpflD,jdbcType=VARCHAR},
      </if>
      <if test="hffcslQk != null">
        #{hffcslQk,jdbcType=VARCHAR},
      </if>
      <if test="hffpflQk != null">
        #{hffpflQk,jdbcType=VARCHAR},
      </if>
      <if test="qhwcslQk != null">
        #{qhwcslQk,jdbcType=VARCHAR},
      </if>
      <if test="qhwpflQk != null">
        #{qhwpflQk,jdbcType=VARCHAR},
      </if>
      <if test="fsscslQk != null">
        #{fsscslQk,jdbcType=VARCHAR},
      </if>
      <if test="fsspflQk != null">
        #{fsspflQk,jdbcType=VARCHAR},
      </if>
      <if test="fsqcslQk != null">
        #{fsqcslQk,jdbcType=VARCHAR},
      </if>
      <if test="fsqpflQk != null">
        #{fsqpflQk,jdbcType=VARCHAR},
      </if>
      <if test="fsgcslQk != null">
        #{fsgcslQk,jdbcType=VARCHAR},
      </if>
      <if test="fsgpflQk != null">
        #{fsgpflQk,jdbcType=VARCHAR},
      </if>
      <if test="fsgcslQkDup1 != null">
        #{fsgcslQkDup1,jdbcType=VARCHAR},
      </if>
      <if test="fsgpflQkDup1 != null">
        #{fsgpflQkDup1,jdbcType=VARCHAR},
      </if>
      <if test="fszgcslQk != null">
        #{fszgcslQk,jdbcType=VARCHAR},
      </if>
      <if test="fszgpflQk != null">
        #{fszgpflQk,jdbcType=VARCHAR},
      </if>
      <if test="fsljgcslQk != null">
        #{fsljgcslQk,jdbcType=VARCHAR},
      </if>
      <if test="fsljgpflQk != null">
        #{fsljgpflQk,jdbcType=VARCHAR},
      </if>
      <if test="isDel != null">
        #{isDel,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.eliteams.quick4j.web.model.PollSourceExample" resultType="java.lang.Long">
    select count(*) from pollution
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update pollution
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.xzqhdm != null">
        XZQHDM = #{record.xzqhdm,jdbcType=VARCHAR},
      </if>
      <if test="record.xzqhmc != null">
        XZQHMC = #{record.xzqhmc,jdbcType=VARCHAR},
      </if>
      <if test="record.tjnf != null">
        TJNF = #{record.tjnf,jdbcType=VARCHAR},
      </if>
      <if test="record.zzjgdm != null">
        ZZJGDM = #{record.zzjgdm,jdbcType=VARCHAR},
      </if>
      <if test="record.tbdwxxmc != null">
        TBDWXXMC = #{record.tbdwxxmc,jdbcType=VARCHAR},
      </if>
      <if test="record.kzdy != null">
        KZDY = #{record.kzdy,jdbcType=VARCHAR},
      </if>
      <if test="record.kzdm != null">
        KZDM = #{record.kzdm,jdbcType=VARCHAR},
      </if>
      <if test="record.qyzt != null">
        QYZT = #{record.qyzt,jdbcType=VARCHAR},
      </if>
      <if test="record.cym != null">
        CYM = #{record.cym,jdbcType=VARCHAR},
      </if>
      <if test="record.xxdzdqSZM != null">
        XXDZDQ_S_Z_M = #{record.xxdzdqSZM,jdbcType=VARCHAR},
      </if>
      <if test="record.xxdzxQSQ != null">
        XXDZX_Q_S_Q = #{record.xxdzxQSQ,jdbcType=VARCHAR},
      </if>
      <if test="record.xxdzxZ != null">
        XXDZX_Z = #{record.xxdzxZ,jdbcType=VARCHAR},
      </if>
      <if test="record.xxdzjCMph != null">
        XXDZJ_C_MPH = #{record.xxdzjCMph,jdbcType=VARCHAR},
      </if>
      <if test="record.zxjdD != null">
        ZXJD_D = #{record.zxjdD,jdbcType=VARCHAR},
      </if>
      <if test="record.zxjdF != null">
        ZXJD_F = #{record.zxjdF,jdbcType=VARCHAR},
      </if>
      <if test="record.zxjdM != null">
        ZXJD_M = #{record.zxjdM,jdbcType=VARCHAR},
      </if>
      <if test="record.jdG != null">
        JD_G = #{record.jdG,jdbcType=VARCHAR},
      </if>
      <if test="record.jdZcxd != null">
        JD_ZCXD = #{record.jdZcxd,jdbcType=VARCHAR},
      </if>
      <if test="record.zxwdD != null">
        ZXWD_D = #{record.zxwdD,jdbcType=VARCHAR},
      </if>
      <if test="record.zxwdF != null">
        ZXWD_F = #{record.zxwdF,jdbcType=VARCHAR},
      </if>
      <if test="record.zxwdM != null">
        ZXWD_M = #{record.zxwdM,jdbcType=VARCHAR},
      </if>
      <if test="record.wdG != null">
        WD_G = #{record.wdG,jdbcType=VARCHAR},
      </if>
      <if test="record.wdZcxd != null">
        WD_ZCXD = #{record.wdZcxd,jdbcType=VARCHAR},
      </if>
      <if test="record.djzclx != null">
        DJZCLX = #{record.djzclx,jdbcType=VARCHAR},
      </if>
      <if test="record.qygm != null">
        QYGM = #{record.qygm,jdbcType=VARCHAR},
      </if>
      <if test="record.ssjtgs != null">
        SSJTGS = #{record.ssjtgs,jdbcType=VARCHAR},
      </if>
      <if test="record.xylbdm != null">
        XYLBDM = #{record.xylbdm,jdbcType=VARCHAR},
      </if>
      <if test="record.xylbmc != null">
        XYLBMC = #{record.xylbmc,jdbcType=VARCHAR},
      </if>
      <if test="record.kysjY != null">
        KYSJ_Y = #{record.kysjY,jdbcType=VARCHAR},
      </if>
      <if test="record.kysjN != null">
        KYSJ_N = #{record.kysjN,jdbcType=VARCHAR},
      </if>
      <if test="record.szlydm != null">
        SZLYDM = #{record.szlydm,jdbcType=VARCHAR},
      </if>
      <if test="record.szlymc != null">
        SZLYMC = #{record.szlymc,jdbcType=VARCHAR},
      </if>
      <if test="record.psqxdm != null">
        PSQXDM = #{record.psqxdm,jdbcType=VARCHAR},
      </if>
      <if test="record.psqxlx != null">
        PSQXLX = #{record.psqxlx,jdbcType=VARCHAR},
      </if>
      <if test="record.prdwsclcdm != null">
        PRDWSCLCDM = #{record.prdwsclcdm,jdbcType=VARCHAR},
      </if>
      <if test="record.prdwsclcmc != null">
        PRDWSCLCMC = #{record.prdwsclcmc,jdbcType=VARCHAR},
      </if>
      <if test="record.snstdm != null">
        SNSTDM = #{record.snstdm,jdbcType=VARCHAR},
      </if>
      <if test="record.snstmc != null">
        SNSTMC = #{record.snstmc,jdbcType=VARCHAR},
      </if>
      <if test="record.gyzczDnjgWy != null">
        GYZCZ_DNJG_WY = #{record.gyzczDnjgWy,jdbcType=VARCHAR},
      </if>
      <if test="record.nzcscsjXs != null">
        NZCSCSJ_XS = #{record.nzcscsjXs,jdbcType=VARCHAR},
      </if>
      <if test="record.gyyslD != null">
        GYYSL_D = #{record.gyyslD,jdbcType=VARCHAR},
      </if>
      <if test="record.qzQslD != null">
        QZ_QSL_D = #{record.qzQslD,jdbcType=VARCHAR},
      </if>
      <if test="record.qzZfyslD != null">
        QZ_ZFYSL_D = #{record.qzZfyslD,jdbcType=VARCHAR},
      </if>
      <if test="record.zyyfclyl1 != null">
        ZYYFCLYL1 = #{record.zyyfclyl1,jdbcType=VARCHAR},
      </if>
      <if test="record.zyyfclylJldw1 != null">
        ZYYFCLYL_JLDW1 = #{record.zyyfclylJldw1,jdbcType=VARCHAR},
      </if>
      <if test="record.zyyfclylBnsj1 != null">
        ZYYFCLYL_BNSJ1 = #{record.zyyfclylBnsj1,jdbcType=VARCHAR},
      </if>
      <if test="record.zyyfclyl2 != null">
        ZYYFCLYL2 = #{record.zyyfclyl2,jdbcType=VARCHAR},
      </if>
      <if test="record.zyyfclylJldw2 != null">
        ZYYFCLYL_JLDW2 = #{record.zyyfclylJldw2,jdbcType=VARCHAR},
      </if>
      <if test="record.zyyfclylBnsj2 != null">
        ZYYFCLYL_BNSJ2 = #{record.zyyfclylBnsj2,jdbcType=VARCHAR},
      </if>
      <if test="record.zyyfclyl3 != null">
        ZYYFCLYL3 = #{record.zyyfclyl3,jdbcType=VARCHAR},
      </if>
      <if test="record.zyyfclylJldw3 != null">
        ZYYFCLYL_JLDW3 = #{record.zyyfclylJldw3,jdbcType=VARCHAR},
      </if>
      <if test="record.zyyfclylBnsj3 != null">
        ZYYFCLYL_BNSJ3 = #{record.zyyfclylBnsj3,jdbcType=VARCHAR},
      </if>
      <if test="record.zycpscqk1 != null">
        ZYCPSCQK1 = #{record.zycpscqk1,jdbcType=VARCHAR},
      </if>
      <if test="record.zycpscqkJldw1 != null">
        ZYCPSCQK_JLDW1 = #{record.zycpscqkJldw1,jdbcType=VARCHAR},
      </if>
      <if test="record.zycpscqkBnsj1 != null">
        ZYCPSCQK_BNSJ1 = #{record.zycpscqkBnsj1,jdbcType=VARCHAR},
      </if>
      <if test="record.zycpscqk2 != null">
        ZYCPSCQK2 = #{record.zycpscqk2,jdbcType=VARCHAR},
      </if>
      <if test="record.zycpscqkJldw2 != null">
        ZYCPSCQK_JLDW2 = #{record.zycpscqkJldw2,jdbcType=VARCHAR},
      </if>
      <if test="record.zycpscqkBnsj2 != null">
        ZYCPSCQK_BNSJ2 = #{record.zycpscqkBnsj2,jdbcType=VARCHAR},
      </if>
      <if test="record.zycpscqk3 != null">
        ZYCPSCQK3 = #{record.zycpscqk3,jdbcType=VARCHAR},
      </if>
      <if test="record.zycpscqkJldw3 != null">
        ZYCPSCQK_JLDW3 = #{record.zycpscqkJldw3,jdbcType=VARCHAR},
      </if>
      <if test="record.zycpscqkBnsj3 != null">
        ZYCPSCQK_BNSJ3 = #{record.zycpscqkBnsj3,jdbcType=VARCHAR},
      </if>
      <if test="record.fszlsssT != null">
        FSZLSSS_T = #{record.fszlsssT,jdbcType=VARCHAR},
      </if>
      <if test="record.fszlssclnlDR != null">
        FSZLSSCLNL_D_R = #{record.fszlssclnlDR,jdbcType=VARCHAR},
      </if>
      <if test="record.fszlssyxfyWy != null">
        FSZLSSYXFY_WY = #{record.fszlssyxfyWy,jdbcType=VARCHAR},
      </if>
      <if test="record.gyfscllD != null">
        GYFSCLL_D = #{record.gyfscllD,jdbcType=VARCHAR},
      </if>
      <if test="record.gyfspflD != null">
        GYFSPFL_D = #{record.gyfspflD,jdbcType=VARCHAR},
      </if>
      <if test="record.qzZjprhjdD != null">
        QZ_ZJPRHJD_D = #{record.qzZjprhjdD,jdbcType=VARCHAR},
      </if>
      <if test="record.qzPrwsclcdD != null">
        QZ_PRWSCLCD_D = #{record.qzPrwsclcdD,jdbcType=VARCHAR},
      </if>
      <if test="record.prwsclcdhxxylndHkS != null">
        PRWSCLCDHXXYLND_HK_S = #{record.prwsclcdhxxylndHkS,jdbcType=VARCHAR},
      </if>
      <if test="record.prwsclcdadndHkS != null">
        PRWSCLCDADND_HK_S = #{record.prwsclcdadndHkS,jdbcType=VARCHAR},
      </if>
      <if test="record.prwsclcdsylndHkS != null">
        PRWSCLCDSYLND_HK_S = #{record.prwsclcdsylndHkS,jdbcType=VARCHAR},
      </if>
      <if test="record.hxxylcslD != null">
        HXXYLCSL_D = #{record.hxxylcslD,jdbcType=VARCHAR},
      </if>
      <if test="record.hxxylpflD != null">
        HXXYLPFL_D = #{record.hxxylpflD,jdbcType=VARCHAR},
      </if>
      <if test="record.adcslD != null">
        ADCSL_D = #{record.adcslD,jdbcType=VARCHAR},
      </if>
      <if test="record.adpflD != null">
        ADPFL_D = #{record.adpflD,jdbcType=VARCHAR},
      </if>
      <if test="record.sylcslD != null">
        SYLCSL_D = #{record.sylcslD,jdbcType=VARCHAR},
      </if>
      <if test="record.sylpflD != null">
        SYLPFL_D = #{record.sylpflD,jdbcType=VARCHAR},
      </if>
      <if test="record.hffcslQk != null">
        HFFCSL_QK = #{record.hffcslQk,jdbcType=VARCHAR},
      </if>
      <if test="record.hffpflQk != null">
        HFFPFL_QK = #{record.hffpflQk,jdbcType=VARCHAR},
      </if>
      <if test="record.qhwcslQk != null">
        QHWCSL_QK = #{record.qhwcslQk,jdbcType=VARCHAR},
      </if>
      <if test="record.qhwpflQk != null">
        QHWPFL_QK = #{record.qhwpflQk,jdbcType=VARCHAR},
      </if>
      <if test="record.fsscslQk != null">
        FSSCSL_QK = #{record.fsscslQk,jdbcType=VARCHAR},
      </if>
      <if test="record.fsspflQk != null">
        FSSPFL_QK = #{record.fsspflQk,jdbcType=VARCHAR},
      </if>
      <if test="record.fsqcslQk != null">
        FSQCSL_QK = #{record.fsqcslQk,jdbcType=VARCHAR},
      </if>
      <if test="record.fsqpflQk != null">
        FSQPFL_QK = #{record.fsqpflQk,jdbcType=VARCHAR},
      </if>
      <if test="record.fsgcslQk != null">
        FSGCSL_QK = #{record.fsgcslQk,jdbcType=VARCHAR},
      </if>
      <if test="record.fsgpflQk != null">
        FSGPFL_QK = #{record.fsgpflQk,jdbcType=VARCHAR},
      </if>
      <if test="record.fsgcslQkDup1 != null">
        FSGCSL_QK_DUP1 = #{record.fsgcslQkDup1,jdbcType=VARCHAR},
      </if>
      <if test="record.fsgpflQkDup1 != null">
        FSGPFL_QK_DUP1 = #{record.fsgpflQkDup1,jdbcType=VARCHAR},
      </if>
      <if test="record.fszgcslQk != null">
        FSZGCSL_QK = #{record.fszgcslQk,jdbcType=VARCHAR},
      </if>
      <if test="record.fszgpflQk != null">
        FSZGPFL_QK = #{record.fszgpflQk,jdbcType=VARCHAR},
      </if>
      <if test="record.fsljgcslQk != null">
        FSLJGCSL_QK = #{record.fsljgcslQk,jdbcType=VARCHAR},
      </if>
      <if test="record.fsljgpflQk != null">
        FSLJGPFL_QK = #{record.fsljgpflQk,jdbcType=VARCHAR},
      </if>
      <if test="record.isDel != null">
        is_del = #{record.isDel,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update pollution
    set ID = #{record.id,jdbcType=INTEGER},
      XZQHDM = #{record.xzqhdm,jdbcType=VARCHAR},
      XZQHMC = #{record.xzqhmc,jdbcType=VARCHAR},
      TJNF = #{record.tjnf,jdbcType=VARCHAR},
      ZZJGDM = #{record.zzjgdm,jdbcType=VARCHAR},
      TBDWXXMC = #{record.tbdwxxmc,jdbcType=VARCHAR},
      KZDY = #{record.kzdy,jdbcType=VARCHAR},
      KZDM = #{record.kzdm,jdbcType=VARCHAR},
      QYZT = #{record.qyzt,jdbcType=VARCHAR},
      CYM = #{record.cym,jdbcType=VARCHAR},
      XXDZDQ_S_Z_M = #{record.xxdzdqSZM,jdbcType=VARCHAR},
      XXDZX_Q_S_Q = #{record.xxdzxQSQ,jdbcType=VARCHAR},
      XXDZX_Z = #{record.xxdzxZ,jdbcType=VARCHAR},
      XXDZJ_C_MPH = #{record.xxdzjCMph,jdbcType=VARCHAR},
      ZXJD_D = #{record.zxjdD,jdbcType=VARCHAR},
      ZXJD_F = #{record.zxjdF,jdbcType=VARCHAR},
      ZXJD_M = #{record.zxjdM,jdbcType=VARCHAR},
      JD_G = #{record.jdG,jdbcType=VARCHAR},
      JD_ZCXD = #{record.jdZcxd,jdbcType=VARCHAR},
      ZXWD_D = #{record.zxwdD,jdbcType=VARCHAR},
      ZXWD_F = #{record.zxwdF,jdbcType=VARCHAR},
      ZXWD_M = #{record.zxwdM,jdbcType=VARCHAR},
      WD_G = #{record.wdG,jdbcType=VARCHAR},
      WD_ZCXD = #{record.wdZcxd,jdbcType=VARCHAR},
      DJZCLX = #{record.djzclx,jdbcType=VARCHAR},
      QYGM = #{record.qygm,jdbcType=VARCHAR},
      SSJTGS = #{record.ssjtgs,jdbcType=VARCHAR},
      XYLBDM = #{record.xylbdm,jdbcType=VARCHAR},
      XYLBMC = #{record.xylbmc,jdbcType=VARCHAR},
      KYSJ_Y = #{record.kysjY,jdbcType=VARCHAR},
      KYSJ_N = #{record.kysjN,jdbcType=VARCHAR},
      SZLYDM = #{record.szlydm,jdbcType=VARCHAR},
      SZLYMC = #{record.szlymc,jdbcType=VARCHAR},
      PSQXDM = #{record.psqxdm,jdbcType=VARCHAR},
      PSQXLX = #{record.psqxlx,jdbcType=VARCHAR},
      PRDWSCLCDM = #{record.prdwsclcdm,jdbcType=VARCHAR},
      PRDWSCLCMC = #{record.prdwsclcmc,jdbcType=VARCHAR},
      SNSTDM = #{record.snstdm,jdbcType=VARCHAR},
      SNSTMC = #{record.snstmc,jdbcType=VARCHAR},
      GYZCZ_DNJG_WY = #{record.gyzczDnjgWy,jdbcType=VARCHAR},
      NZCSCSJ_XS = #{record.nzcscsjXs,jdbcType=VARCHAR},
      GYYSL_D = #{record.gyyslD,jdbcType=VARCHAR},
      QZ_QSL_D = #{record.qzQslD,jdbcType=VARCHAR},
      QZ_ZFYSL_D = #{record.qzZfyslD,jdbcType=VARCHAR},
      ZYYFCLYL1 = #{record.zyyfclyl1,jdbcType=VARCHAR},
      ZYYFCLYL_JLDW1 = #{record.zyyfclylJldw1,jdbcType=VARCHAR},
      ZYYFCLYL_BNSJ1 = #{record.zyyfclylBnsj1,jdbcType=VARCHAR},
      ZYYFCLYL2 = #{record.zyyfclyl2,jdbcType=VARCHAR},
      ZYYFCLYL_JLDW2 = #{record.zyyfclylJldw2,jdbcType=VARCHAR},
      ZYYFCLYL_BNSJ2 = #{record.zyyfclylBnsj2,jdbcType=VARCHAR},
      ZYYFCLYL3 = #{record.zyyfclyl3,jdbcType=VARCHAR},
      ZYYFCLYL_JLDW3 = #{record.zyyfclylJldw3,jdbcType=VARCHAR},
      ZYYFCLYL_BNSJ3 = #{record.zyyfclylBnsj3,jdbcType=VARCHAR},
      ZYCPSCQK1 = #{record.zycpscqk1,jdbcType=VARCHAR},
      ZYCPSCQK_JLDW1 = #{record.zycpscqkJldw1,jdbcType=VARCHAR},
      ZYCPSCQK_BNSJ1 = #{record.zycpscqkBnsj1,jdbcType=VARCHAR},
      ZYCPSCQK2 = #{record.zycpscqk2,jdbcType=VARCHAR},
      ZYCPSCQK_JLDW2 = #{record.zycpscqkJldw2,jdbcType=VARCHAR},
      ZYCPSCQK_BNSJ2 = #{record.zycpscqkBnsj2,jdbcType=VARCHAR},
      ZYCPSCQK3 = #{record.zycpscqk3,jdbcType=VARCHAR},
      ZYCPSCQK_JLDW3 = #{record.zycpscqkJldw3,jdbcType=VARCHAR},
      ZYCPSCQK_BNSJ3 = #{record.zycpscqkBnsj3,jdbcType=VARCHAR},
      FSZLSSS_T = #{record.fszlsssT,jdbcType=VARCHAR},
      FSZLSSCLNL_D_R = #{record.fszlssclnlDR,jdbcType=VARCHAR},
      FSZLSSYXFY_WY = #{record.fszlssyxfyWy,jdbcType=VARCHAR},
      GYFSCLL_D = #{record.gyfscllD,jdbcType=VARCHAR},
      GYFSPFL_D = #{record.gyfspflD,jdbcType=VARCHAR},
      QZ_ZJPRHJD_D = #{record.qzZjprhjdD,jdbcType=VARCHAR},
      QZ_PRWSCLCD_D = #{record.qzPrwsclcdD,jdbcType=VARCHAR},
      PRWSCLCDHXXYLND_HK_S = #{record.prwsclcdhxxylndHkS,jdbcType=VARCHAR},
      PRWSCLCDADND_HK_S = #{record.prwsclcdadndHkS,jdbcType=VARCHAR},
      PRWSCLCDSYLND_HK_S = #{record.prwsclcdsylndHkS,jdbcType=VARCHAR},
      HXXYLCSL_D = #{record.hxxylcslD,jdbcType=VARCHAR},
      HXXYLPFL_D = #{record.hxxylpflD,jdbcType=VARCHAR},
      ADCSL_D = #{record.adcslD,jdbcType=VARCHAR},
      ADPFL_D = #{record.adpflD,jdbcType=VARCHAR},
      SYLCSL_D = #{record.sylcslD,jdbcType=VARCHAR},
      SYLPFL_D = #{record.sylpflD,jdbcType=VARCHAR},
      HFFCSL_QK = #{record.hffcslQk,jdbcType=VARCHAR},
      HFFPFL_QK = #{record.hffpflQk,jdbcType=VARCHAR},
      QHWCSL_QK = #{record.qhwcslQk,jdbcType=VARCHAR},
      QHWPFL_QK = #{record.qhwpflQk,jdbcType=VARCHAR},
      FSSCSL_QK = #{record.fsscslQk,jdbcType=VARCHAR},
      FSSPFL_QK = #{record.fsspflQk,jdbcType=VARCHAR},
      FSQCSL_QK = #{record.fsqcslQk,jdbcType=VARCHAR},
      FSQPFL_QK = #{record.fsqpflQk,jdbcType=VARCHAR},
      FSGCSL_QK = #{record.fsgcslQk,jdbcType=VARCHAR},
      FSGPFL_QK = #{record.fsgpflQk,jdbcType=VARCHAR},
      FSGCSL_QK_DUP1 = #{record.fsgcslQkDup1,jdbcType=VARCHAR},
      FSGPFL_QK_DUP1 = #{record.fsgpflQkDup1,jdbcType=VARCHAR},
      FSZGCSL_QK = #{record.fszgcslQk,jdbcType=VARCHAR},
      FSZGPFL_QK = #{record.fszgpflQk,jdbcType=VARCHAR},
      FSLJGCSL_QK = #{record.fsljgcslQk,jdbcType=VARCHAR},
      FSLJGPFL_QK = #{record.fsljgpflQk,jdbcType=VARCHAR},
      is_del = #{record.isDel,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.eliteams.quick4j.web.model.PollSource">
    update pollution
    <set>
      <if test="xzqhdm != null">
        XZQHDM = #{xzqhdm,jdbcType=VARCHAR},
      </if>
      <if test="xzqhmc != null">
        XZQHMC = #{xzqhmc,jdbcType=VARCHAR},
      </if>
      <if test="tjnf != null">
        TJNF = #{tjnf,jdbcType=VARCHAR},
      </if>
      <if test="zzjgdm != null">
        ZZJGDM = #{zzjgdm,jdbcType=VARCHAR},
      </if>
      <if test="tbdwxxmc != null">
        TBDWXXMC = #{tbdwxxmc,jdbcType=VARCHAR},
      </if>
      <if test="kzdy != null">
        KZDY = #{kzdy,jdbcType=VARCHAR},
      </if>
      <if test="kzdm != null">
        KZDM = #{kzdm,jdbcType=VARCHAR},
      </if>
      <if test="qyzt != null">
        QYZT = #{qyzt,jdbcType=VARCHAR},
      </if>
      <if test="cym != null">
        CYM = #{cym,jdbcType=VARCHAR},
      </if>
      <if test="xxdzdqSZM != null">
        XXDZDQ_S_Z_M = #{xxdzdqSZM,jdbcType=VARCHAR},
      </if>
      <if test="xxdzxQSQ != null">
        XXDZX_Q_S_Q = #{xxdzxQSQ,jdbcType=VARCHAR},
      </if>
      <if test="xxdzxZ != null">
        XXDZX_Z = #{xxdzxZ,jdbcType=VARCHAR},
      </if>
      <if test="xxdzjCMph != null">
        XXDZJ_C_MPH = #{xxdzjCMph,jdbcType=VARCHAR},
      </if>
      <if test="zxjdD != null">
        ZXJD_D = #{zxjdD,jdbcType=VARCHAR},
      </if>
      <if test="zxjdF != null">
        ZXJD_F = #{zxjdF,jdbcType=VARCHAR},
      </if>
      <if test="zxjdM != null">
        ZXJD_M = #{zxjdM,jdbcType=VARCHAR},
      </if>
      <if test="jdG != null">
        JD_G = #{jdG,jdbcType=VARCHAR},
      </if>
      <if test="jdZcxd != null">
        JD_ZCXD = #{jdZcxd,jdbcType=VARCHAR},
      </if>
      <if test="zxwdD != null">
        ZXWD_D = #{zxwdD,jdbcType=VARCHAR},
      </if>
      <if test="zxwdF != null">
        ZXWD_F = #{zxwdF,jdbcType=VARCHAR},
      </if>
      <if test="zxwdM != null">
        ZXWD_M = #{zxwdM,jdbcType=VARCHAR},
      </if>
      <if test="wdG != null">
        WD_G = #{wdG,jdbcType=VARCHAR},
      </if>
      <if test="wdZcxd != null">
        WD_ZCXD = #{wdZcxd,jdbcType=VARCHAR},
      </if>
      <if test="djzclx != null">
        DJZCLX = #{djzclx,jdbcType=VARCHAR},
      </if>
      <if test="qygm != null">
        QYGM = #{qygm,jdbcType=VARCHAR},
      </if>
      <if test="ssjtgs != null">
        SSJTGS = #{ssjtgs,jdbcType=VARCHAR},
      </if>
      <if test="xylbdm != null">
        XYLBDM = #{xylbdm,jdbcType=VARCHAR},
      </if>
      <if test="xylbmc != null">
        XYLBMC = #{xylbmc,jdbcType=VARCHAR},
      </if>
      <if test="kysjY != null">
        KYSJ_Y = #{kysjY,jdbcType=VARCHAR},
      </if>
      <if test="kysjN != null">
        KYSJ_N = #{kysjN,jdbcType=VARCHAR},
      </if>
      <if test="szlydm != null">
        SZLYDM = #{szlydm,jdbcType=VARCHAR},
      </if>
      <if test="szlymc != null">
        SZLYMC = #{szlymc,jdbcType=VARCHAR},
      </if>
      <if test="psqxdm != null">
        PSQXDM = #{psqxdm,jdbcType=VARCHAR},
      </if>
      <if test="psqxlx != null">
        PSQXLX = #{psqxlx,jdbcType=VARCHAR},
      </if>
      <if test="prdwsclcdm != null">
        PRDWSCLCDM = #{prdwsclcdm,jdbcType=VARCHAR},
      </if>
      <if test="prdwsclcmc != null">
        PRDWSCLCMC = #{prdwsclcmc,jdbcType=VARCHAR},
      </if>
      <if test="snstdm != null">
        SNSTDM = #{snstdm,jdbcType=VARCHAR},
      </if>
      <if test="snstmc != null">
        SNSTMC = #{snstmc,jdbcType=VARCHAR},
      </if>
      <if test="gyzczDnjgWy != null">
        GYZCZ_DNJG_WY = #{gyzczDnjgWy,jdbcType=VARCHAR},
      </if>
      <if test="nzcscsjXs != null">
        NZCSCSJ_XS = #{nzcscsjXs,jdbcType=VARCHAR},
      </if>
      <if test="gyyslD != null">
        GYYSL_D = #{gyyslD,jdbcType=VARCHAR},
      </if>
      <if test="qzQslD != null">
        QZ_QSL_D = #{qzQslD,jdbcType=VARCHAR},
      </if>
      <if test="qzZfyslD != null">
        QZ_ZFYSL_D = #{qzZfyslD,jdbcType=VARCHAR},
      </if>
      <if test="zyyfclyl1 != null">
        ZYYFCLYL1 = #{zyyfclyl1,jdbcType=VARCHAR},
      </if>
      <if test="zyyfclylJldw1 != null">
        ZYYFCLYL_JLDW1 = #{zyyfclylJldw1,jdbcType=VARCHAR},
      </if>
      <if test="zyyfclylBnsj1 != null">
        ZYYFCLYL_BNSJ1 = #{zyyfclylBnsj1,jdbcType=VARCHAR},
      </if>
      <if test="zyyfclyl2 != null">
        ZYYFCLYL2 = #{zyyfclyl2,jdbcType=VARCHAR},
      </if>
      <if test="zyyfclylJldw2 != null">
        ZYYFCLYL_JLDW2 = #{zyyfclylJldw2,jdbcType=VARCHAR},
      </if>
      <if test="zyyfclylBnsj2 != null">
        ZYYFCLYL_BNSJ2 = #{zyyfclylBnsj2,jdbcType=VARCHAR},
      </if>
      <if test="zyyfclyl3 != null">
        ZYYFCLYL3 = #{zyyfclyl3,jdbcType=VARCHAR},
      </if>
      <if test="zyyfclylJldw3 != null">
        ZYYFCLYL_JLDW3 = #{zyyfclylJldw3,jdbcType=VARCHAR},
      </if>
      <if test="zyyfclylBnsj3 != null">
        ZYYFCLYL_BNSJ3 = #{zyyfclylBnsj3,jdbcType=VARCHAR},
      </if>
      <if test="zycpscqk1 != null">
        ZYCPSCQK1 = #{zycpscqk1,jdbcType=VARCHAR},
      </if>
      <if test="zycpscqkJldw1 != null">
        ZYCPSCQK_JLDW1 = #{zycpscqkJldw1,jdbcType=VARCHAR},
      </if>
      <if test="zycpscqkBnsj1 != null">
        ZYCPSCQK_BNSJ1 = #{zycpscqkBnsj1,jdbcType=VARCHAR},
      </if>
      <if test="zycpscqk2 != null">
        ZYCPSCQK2 = #{zycpscqk2,jdbcType=VARCHAR},
      </if>
      <if test="zycpscqkJldw2 != null">
        ZYCPSCQK_JLDW2 = #{zycpscqkJldw2,jdbcType=VARCHAR},
      </if>
      <if test="zycpscqkBnsj2 != null">
        ZYCPSCQK_BNSJ2 = #{zycpscqkBnsj2,jdbcType=VARCHAR},
      </if>
      <if test="zycpscqk3 != null">
        ZYCPSCQK3 = #{zycpscqk3,jdbcType=VARCHAR},
      </if>
      <if test="zycpscqkJldw3 != null">
        ZYCPSCQK_JLDW3 = #{zycpscqkJldw3,jdbcType=VARCHAR},
      </if>
      <if test="zycpscqkBnsj3 != null">
        ZYCPSCQK_BNSJ3 = #{zycpscqkBnsj3,jdbcType=VARCHAR},
      </if>
      <if test="fszlsssT != null">
        FSZLSSS_T = #{fszlsssT,jdbcType=VARCHAR},
      </if>
      <if test="fszlssclnlDR != null">
        FSZLSSCLNL_D_R = #{fszlssclnlDR,jdbcType=VARCHAR},
      </if>
      <if test="fszlssyxfyWy != null">
        FSZLSSYXFY_WY = #{fszlssyxfyWy,jdbcType=VARCHAR},
      </if>
      <if test="gyfscllD != null">
        GYFSCLL_D = #{gyfscllD,jdbcType=VARCHAR},
      </if>
      <if test="gyfspflD != null">
        GYFSPFL_D = #{gyfspflD,jdbcType=VARCHAR},
      </if>
      <if test="qzZjprhjdD != null">
        QZ_ZJPRHJD_D = #{qzZjprhjdD,jdbcType=VARCHAR},
      </if>
      <if test="qzPrwsclcdD != null">
        QZ_PRWSCLCD_D = #{qzPrwsclcdD,jdbcType=VARCHAR},
      </if>
      <if test="prwsclcdhxxylndHkS != null">
        PRWSCLCDHXXYLND_HK_S = #{prwsclcdhxxylndHkS,jdbcType=VARCHAR},
      </if>
      <if test="prwsclcdadndHkS != null">
        PRWSCLCDADND_HK_S = #{prwsclcdadndHkS,jdbcType=VARCHAR},
      </if>
      <if test="prwsclcdsylndHkS != null">
        PRWSCLCDSYLND_HK_S = #{prwsclcdsylndHkS,jdbcType=VARCHAR},
      </if>
      <if test="hxxylcslD != null">
        HXXYLCSL_D = #{hxxylcslD,jdbcType=VARCHAR},
      </if>
      <if test="hxxylpflD != null">
        HXXYLPFL_D = #{hxxylpflD,jdbcType=VARCHAR},
      </if>
      <if test="adcslD != null">
        ADCSL_D = #{adcslD,jdbcType=VARCHAR},
      </if>
      <if test="adpflD != null">
        ADPFL_D = #{adpflD,jdbcType=VARCHAR},
      </if>
      <if test="sylcslD != null">
        SYLCSL_D = #{sylcslD,jdbcType=VARCHAR},
      </if>
      <if test="sylpflD != null">
        SYLPFL_D = #{sylpflD,jdbcType=VARCHAR},
      </if>
      <if test="hffcslQk != null">
        HFFCSL_QK = #{hffcslQk,jdbcType=VARCHAR},
      </if>
      <if test="hffpflQk != null">
        HFFPFL_QK = #{hffpflQk,jdbcType=VARCHAR},
      </if>
      <if test="qhwcslQk != null">
        QHWCSL_QK = #{qhwcslQk,jdbcType=VARCHAR},
      </if>
      <if test="qhwpflQk != null">
        QHWPFL_QK = #{qhwpflQk,jdbcType=VARCHAR},
      </if>
      <if test="fsscslQk != null">
        FSSCSL_QK = #{fsscslQk,jdbcType=VARCHAR},
      </if>
      <if test="fsspflQk != null">
        FSSPFL_QK = #{fsspflQk,jdbcType=VARCHAR},
      </if>
      <if test="fsqcslQk != null">
        FSQCSL_QK = #{fsqcslQk,jdbcType=VARCHAR},
      </if>
      <if test="fsqpflQk != null">
        FSQPFL_QK = #{fsqpflQk,jdbcType=VARCHAR},
      </if>
      <if test="fsgcslQk != null">
        FSGCSL_QK = #{fsgcslQk,jdbcType=VARCHAR},
      </if>
      <if test="fsgpflQk != null">
        FSGPFL_QK = #{fsgpflQk,jdbcType=VARCHAR},
      </if>
      <if test="fsgcslQkDup1 != null">
        FSGCSL_QK_DUP1 = #{fsgcslQkDup1,jdbcType=VARCHAR},
      </if>
      <if test="fsgpflQkDup1 != null">
        FSGPFL_QK_DUP1 = #{fsgpflQkDup1,jdbcType=VARCHAR},
      </if>
      <if test="fszgcslQk != null">
        FSZGCSL_QK = #{fszgcslQk,jdbcType=VARCHAR},
      </if>
      <if test="fszgpflQk != null">
        FSZGPFL_QK = #{fszgpflQk,jdbcType=VARCHAR},
      </if>
      <if test="fsljgcslQk != null">
        FSLJGCSL_QK = #{fsljgcslQk,jdbcType=VARCHAR},
      </if>
      <if test="fsljgpflQk != null">
        FSLJGPFL_QK = #{fsljgpflQk,jdbcType=VARCHAR},
      </if>
      <if test="isDel != null">
        is_del = #{isDel,jdbcType=INTEGER},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.eliteams.quick4j.web.model.PollSource">
    update pollution
    set XZQHDM = #{xzqhdm,jdbcType=VARCHAR},
      XZQHMC = #{xzqhmc,jdbcType=VARCHAR},
      TJNF = #{tjnf,jdbcType=VARCHAR},
      ZZJGDM = #{zzjgdm,jdbcType=VARCHAR},
      TBDWXXMC = #{tbdwxxmc,jdbcType=VARCHAR},
      KZDY = #{kzdy,jdbcType=VARCHAR},
      KZDM = #{kzdm,jdbcType=VARCHAR},
      QYZT = #{qyzt,jdbcType=VARCHAR},
      CYM = #{cym,jdbcType=VARCHAR},
      XXDZDQ_S_Z_M = #{xxdzdqSZM,jdbcType=VARCHAR},
      XXDZX_Q_S_Q = #{xxdzxQSQ,jdbcType=VARCHAR},
      XXDZX_Z = #{xxdzxZ,jdbcType=VARCHAR},
      XXDZJ_C_MPH = #{xxdzjCMph,jdbcType=VARCHAR},
      ZXJD_D = #{zxjdD,jdbcType=VARCHAR},
      ZXJD_F = #{zxjdF,jdbcType=VARCHAR},
      ZXJD_M = #{zxjdM,jdbcType=VARCHAR},
      JD_G = #{jdG,jdbcType=VARCHAR},
      JD_ZCXD = #{jdZcxd,jdbcType=VARCHAR},
      ZXWD_D = #{zxwdD,jdbcType=VARCHAR},
      ZXWD_F = #{zxwdF,jdbcType=VARCHAR},
      ZXWD_M = #{zxwdM,jdbcType=VARCHAR},
      WD_G = #{wdG,jdbcType=VARCHAR},
      WD_ZCXD = #{wdZcxd,jdbcType=VARCHAR},
      DJZCLX = #{djzclx,jdbcType=VARCHAR},
      QYGM = #{qygm,jdbcType=VARCHAR},
      SSJTGS = #{ssjtgs,jdbcType=VARCHAR},
      XYLBDM = #{xylbdm,jdbcType=VARCHAR},
      XYLBMC = #{xylbmc,jdbcType=VARCHAR},
      KYSJ_Y = #{kysjY,jdbcType=VARCHAR},
      KYSJ_N = #{kysjN,jdbcType=VARCHAR},
      SZLYDM = #{szlydm,jdbcType=VARCHAR},
      SZLYMC = #{szlymc,jdbcType=VARCHAR},
      PSQXDM = #{psqxdm,jdbcType=VARCHAR},
      PSQXLX = #{psqxlx,jdbcType=VARCHAR},
      PRDWSCLCDM = #{prdwsclcdm,jdbcType=VARCHAR},
      PRDWSCLCMC = #{prdwsclcmc,jdbcType=VARCHAR},
      SNSTDM = #{snstdm,jdbcType=VARCHAR},
      SNSTMC = #{snstmc,jdbcType=VARCHAR},
      GYZCZ_DNJG_WY = #{gyzczDnjgWy,jdbcType=VARCHAR},
      NZCSCSJ_XS = #{nzcscsjXs,jdbcType=VARCHAR},
      GYYSL_D = #{gyyslD,jdbcType=VARCHAR},
      QZ_QSL_D = #{qzQslD,jdbcType=VARCHAR},
      QZ_ZFYSL_D = #{qzZfyslD,jdbcType=VARCHAR},
      ZYYFCLYL1 = #{zyyfclyl1,jdbcType=VARCHAR},
      ZYYFCLYL_JLDW1 = #{zyyfclylJldw1,jdbcType=VARCHAR},
      ZYYFCLYL_BNSJ1 = #{zyyfclylBnsj1,jdbcType=VARCHAR},
      ZYYFCLYL2 = #{zyyfclyl2,jdbcType=VARCHAR},
      ZYYFCLYL_JLDW2 = #{zyyfclylJldw2,jdbcType=VARCHAR},
      ZYYFCLYL_BNSJ2 = #{zyyfclylBnsj2,jdbcType=VARCHAR},
      ZYYFCLYL3 = #{zyyfclyl3,jdbcType=VARCHAR},
      ZYYFCLYL_JLDW3 = #{zyyfclylJldw3,jdbcType=VARCHAR},
      ZYYFCLYL_BNSJ3 = #{zyyfclylBnsj3,jdbcType=VARCHAR},
      ZYCPSCQK1 = #{zycpscqk1,jdbcType=VARCHAR},
      ZYCPSCQK_JLDW1 = #{zycpscqkJldw1,jdbcType=VARCHAR},
      ZYCPSCQK_BNSJ1 = #{zycpscqkBnsj1,jdbcType=VARCHAR},
      ZYCPSCQK2 = #{zycpscqk2,jdbcType=VARCHAR},
      ZYCPSCQK_JLDW2 = #{zycpscqkJldw2,jdbcType=VARCHAR},
      ZYCPSCQK_BNSJ2 = #{zycpscqkBnsj2,jdbcType=VARCHAR},
      ZYCPSCQK3 = #{zycpscqk3,jdbcType=VARCHAR},
      ZYCPSCQK_JLDW3 = #{zycpscqkJldw3,jdbcType=VARCHAR},
      ZYCPSCQK_BNSJ3 = #{zycpscqkBnsj3,jdbcType=VARCHAR},
      FSZLSSS_T = #{fszlsssT,jdbcType=VARCHAR},
      FSZLSSCLNL_D_R = #{fszlssclnlDR,jdbcType=VARCHAR},
      FSZLSSYXFY_WY = #{fszlssyxfyWy,jdbcType=VARCHAR},
      GYFSCLL_D = #{gyfscllD,jdbcType=VARCHAR},
      GYFSPFL_D = #{gyfspflD,jdbcType=VARCHAR},
      QZ_ZJPRHJD_D = #{qzZjprhjdD,jdbcType=VARCHAR},
      QZ_PRWSCLCD_D = #{qzPrwsclcdD,jdbcType=VARCHAR},
      PRWSCLCDHXXYLND_HK_S = #{prwsclcdhxxylndHkS,jdbcType=VARCHAR},
      PRWSCLCDADND_HK_S = #{prwsclcdadndHkS,jdbcType=VARCHAR},
      PRWSCLCDSYLND_HK_S = #{prwsclcdsylndHkS,jdbcType=VARCHAR},
      HXXYLCSL_D = #{hxxylcslD,jdbcType=VARCHAR},
      HXXYLPFL_D = #{hxxylpflD,jdbcType=VARCHAR},
      ADCSL_D = #{adcslD,jdbcType=VARCHAR},
      ADPFL_D = #{adpflD,jdbcType=VARCHAR},
      SYLCSL_D = #{sylcslD,jdbcType=VARCHAR},
      SYLPFL_D = #{sylpflD,jdbcType=VARCHAR},
      HFFCSL_QK = #{hffcslQk,jdbcType=VARCHAR},
      HFFPFL_QK = #{hffpflQk,jdbcType=VARCHAR},
      QHWCSL_QK = #{qhwcslQk,jdbcType=VARCHAR},
      QHWPFL_QK = #{qhwpflQk,jdbcType=VARCHAR},
      FSSCSL_QK = #{fsscslQk,jdbcType=VARCHAR},
      FSSPFL_QK = #{fsspflQk,jdbcType=VARCHAR},
      FSQCSL_QK = #{fsqcslQk,jdbcType=VARCHAR},
      FSQPFL_QK = #{fsqpflQk,jdbcType=VARCHAR},
      FSGCSL_QK = #{fsgcslQk,jdbcType=VARCHAR},
      FSGPFL_QK = #{fsgpflQk,jdbcType=VARCHAR},
      FSGCSL_QK_DUP1 = #{fsgcslQkDup1,jdbcType=VARCHAR},
      FSGPFL_QK_DUP1 = #{fsgpflQkDup1,jdbcType=VARCHAR},
      FSZGCSL_QK = #{fszgcslQk,jdbcType=VARCHAR},
      FSZGPFL_QK = #{fszgpflQk,jdbcType=VARCHAR},
      FSLJGCSL_QK = #{fsljgcslQk,jdbcType=VARCHAR},
      FSLJGPFL_QK = #{fsljgpflQk,jdbcType=VARCHAR},
      is_del = #{isDel,jdbcType=INTEGER}
    where ID = #{id,jdbcType=INTEGER}
  </update>
  
  
  
  
  
    <update id="deleteById" parameterType="java.lang.Long">
		update pollution
		set is_del = 1
		where ID = #{id,jdbcType=INTEGER}
	
  	</update>
    <select id="listAll" resultMap="BaseResultMap">    
        select 
        <include refid="Base_Column_List" />
        from pollution
        where
        <if test="map.tjnf != null"> TJNF = #{map.tjnf} and  </if> 
        is_del = 0  
        ORDER BY XZQHMC
   </select>  
   <!-- 分页SQL语句 -->
	<select id="selectByPage" resultMap="BaseResultMap">
		select
		*
		from pollution
		WHERE
		<if test="map.tjnf != null"> TJNF = #{map.tjnf} and  </if>
		is_del = 0
		ORDER BY XZQHMC
		limit #{startPos},#{pageSize}
	</select>
	<!-- 取得记录的总数 -->
	<select id="getCount" resultType="long">
		select
		count(*)
		from pollution
		where
		<if test="map.tjnf != null"> TJNF = #{map.tjnf} and  </if>
		is_del = 0
		ORDER BY XZQHMC
	</select> 
    <select id="getSearchCount" resultType="java.lang.Integer" parameterType="java.util.Map">
		select
		count(*)
		from pollution
		WHERE
		<trim>  
				  <if test="map.tjnf != null"> TJNF = #{map.tjnf} and  </if>
		  		  <if test="map.id != null">
		        	ID = #{map.id} and
		      	  </if>
			      <if test="map.xzqhmc != null">
			        XZQHMC LIKE CONCAT('%', #{map.xzqhmc}, '%') and
			      </if>
				  <if test="map.tbdwxxmc != null">
			        TBDWXXMC LIKE CONCAT('%', #{map.tbdwxxmc}, '%') and
			      </if>
				  <if test="map.kzdy != null">
			        KZDY LIKE CONCAT('%', #{map.kzdy}, '%') and
			      </if>
				  <if test="map.kzdm != null">
			        KZDM LIKE CONCAT('%', #{map.kzdm}, '%') and
			      </if>
			      <if test="map.xxdzdqSZM != null">
			        XXDZDQ_S_Z_M LIKE CONCAT('%', #{map.xxdzdqSZM}, '%') and
			      </if>
			      <if test="map.xxdzxQSQ != null">
			        XXDZX_Q_S_Q LIKE CONCAT('%', #{map.xxdzxQSQ}, '%') and
			      </if>
			      <if test="map.xxdzxZ != null">
			        XXDZX_Z LIKE CONCAT('%', #{map.xxdzxZ}, '%') and
			      </if>
		          <if test="map.jdG != null">
			        JD_G LIKE CONCAT('%', #{map.jdG}, '%') and
			      </if>
				  <if test="map.wdG != null">
			        WD_G LIKE CONCAT('%', #{map.wdG}, '%') and
			      </if> 
			      <if test="map.snstmc != null">
			        SNSTMC LIKE CONCAT('%', #{map.snstmc}, '%') and
			      </if>
			      <if test="map.gyfspflD != null">
			        GYFSPFL_D LIKE CONCAT('%', #{map.gyfspflD}, '%') and
			      </if>
			      <if test="map.hxxylpflD != null">
			        HXXYLPFL_D LIKE CONCAT('%', #{map.hxxylpflD}, '%') and
			      </if>  
			      <if test="map.adpflD != null">
			        ADPFL_D LIKE CONCAT('%', #{map.adpflD}, '%') and
			      </if>
			      <if test="map.sylpflD != null">
			        SYLPFL_D LIKE CONCAT('%', #{map.sylpflD}, '%') and
			      </if>
			      <if test="map.hffpflQk != null">
			        HFFPFL_QK LIKE CONCAT('%', #{map.hffpflQk}, '%') and
			      </if>  	      
			      <if test="map.qhwpflQk != null">
			        QHWPFL_QK LIKE CONCAT('%', #{map.qhwpflQk}, '%') and
			      </if>
			      <if test="map.fsspflQk != null">
			        FSSPFL_QK LIKE CONCAT('%', #{map.fsspflQk}, '%') and
			      </if>
			      <if test="map.fsqpflQk != null">
			        FSQPFL_QK LIKE CONCAT('%', #{map.fsqpflQk}, '%') and
			      </if>  	      
			      <if test="map.fsgpflQk != null">
			        FSGPFL_QK LIKE CONCAT('%', #{map.fsgpflQk}, '%') and
			      </if>  	      
			      <if test="map.fsgpflQkDup1 != null">
			        FSGPFL_QK_DUP1 LIKE CONCAT('%', #{map.fsgpflQkDup1}, '%') and
			      </if>  	      
			      <if test="map.fszgpflQk != null">
			        FSZGPFL_QK LIKE CONCAT('%', #{map.fszgpflQk}, '%') and
			      </if>  	  	      
			      <if test="map.fsljgpflQk != null">
			        FSLJGPFL_QK LIKE CONCAT('%', #{map.fsljgpflQk}, '%') and
			      </if>  	      
		          is_del = 0
		</trim>
		ORDER BY XZQHMC
	</select>	
 	<select id="searchByPage" resultMap="BaseResultMap">
		select
		*
		from pollution
		WHERE
		<trim>  
			  <if test="map.tjnf != null"> TJNF = #{map.tjnf} and  </if>
			  
	  		  <if test="map.id != null">
	        	ID = #{map.id} and
	      	  </if>
		      <if test="map.xzqhmc != null">
		        XZQHMC LIKE CONCAT('%', #{map.xzqhmc}, '%') and
		      </if>
			  <if test="map.tbdwxxmc != null">
		        TBDWXXMC LIKE CONCAT('%', #{map.tbdwxxmc}, '%') and
		      </if>
			  <if test="map.kzdy != null">
		        KZDY LIKE CONCAT('%', #{map.kzdy}, '%') and
		      </if>
			  <if test="map.kzdm != null">
		        KZDM LIKE CONCAT('%', #{map.kzdm}, '%') and
		      </if>
		      <if test="map.xxdzdqSZM != null">
		        XXDZDQ_S_Z_M LIKE CONCAT('%', #{map.xxdzdqSZM}, '%') and
		      </if>
		      <if test="map.xxdzxQSQ != null">
		        XXDZX_Q_S_Q LIKE CONCAT('%', #{map.xxdzxQSQ}, '%') and
		      </if>
		      <if test="map.xxdzxZ != null">
		        XXDZX_Z LIKE CONCAT('%', #{map.xxdzxZ}, '%') and
		      </if>
	          <if test="map.jdG != null">
		        JD_G LIKE CONCAT('%', #{map.jdG}, '%') and
		      </if>
			  <if test="map.wdG != null">
		        WD_G LIKE CONCAT('%', #{map.wdG}, '%') and
		      </if> 
		      <if test="map.snstmc != null">
		        SNSTMC LIKE CONCAT('%', #{map.snstmc}, '%') and
		      </if>
		      <if test="map.gyfspflD != null">
		        GYFSPFL_D LIKE CONCAT('%', #{map.gyfspflD}, '%') and
		      </if>
		      <if test="map.hxxylpflD != null">
		        HXXYLPFL_D LIKE CONCAT('%', #{map.hxxylpflD}, '%') and
		      </if>  
		      <if test="map.adpflD != null">
		        ADPFL_D LIKE CONCAT('%', #{map.adpflD}, '%') and
		      </if>
		      <if test="map.sylpflD != null">
		        SYLPFL_D LIKE CONCAT('%', #{map.sylpflD}, '%') and
		      </if>
		      <if test="map.hffpflQk != null">
		        HFFPFL_QK LIKE CONCAT('%', #{map.hffpflQk}, '%') and
		      </if>  	      
		      <if test="map.qhwpflQk != null">
		        QHWPFL_QK LIKE CONCAT('%', #{map.qhwpflQk}, '%') and
		      </if>
		      <if test="map.fsspflQk != null">
		        FSSPFL_QK LIKE CONCAT('%', #{map.fsspflQk}, '%') and
		      </if>
		      <if test="map.fsqpflQk != null">
		        FSQPFL_QK LIKE CONCAT('%', #{map.fsqpflQk}, '%') and
		      </if>  	      
		      <if test="map.fsgpflQk != null">
		        FSGPFL_QK LIKE CONCAT('%', #{map.fsgpflQk}, '%') and
		      </if>  	      
		      <if test="map.fsgpflQkDup1 != null">
		        FSGPFL_QK_DUP1 LIKE CONCAT('%', #{map.fsgpflQkDup1}, '%') and
		      </if>  	      
		      <if test="map.fszgpflQk != null">
		        FSZGPFL_QK LIKE CONCAT('%', #{map.fszgpflQk}, '%') and
		      </if>  	  	      
		      <if test="map.fsljgpflQk != null">
		        FSLJGPFL_QK LIKE CONCAT('%', #{map.fsljgpflQk}, '%') and
		      </if>  	      
		      is_del = 0 
		</trim>
		ORDER BY XZQHMC
		limit #{startPos},#{pageSize}
	</select>	
  
	<select id="selectForMap" resultMap="BaseResultMap">
		select
		*
		from pollution
		WHERE
		<trim>  
		  <if test="map.tjnf != null"> TJNF = #{map.tjnf} and  </if>
		  
		  <if test="map.id != null">
        	ID = #{map.id} and
      	  </if>
	      <if test="map.xzqhmc != null">
	        XZQHMC LIKE CONCAT('%', #{map.xzqhmc}, '%') and
	      </if>
		  <if test="map.tbdwxxmc != null">
	        TBDWXXMC LIKE CONCAT('%', #{map.tbdwxxmc}, '%') and
	      </if>
		  <if test="map.kzdy != null">
	        KZDY LIKE CONCAT('%', #{map.kzdy}, '%') and
	      </if>
		  <if test="map.kzdm != null">
	        KZDM LIKE CONCAT('%', #{map.kzdm}, '%') and
	      </if>
	      <if test="map.xxdzdqSZM != null">
	        XXDZDQ_S_Z_M LIKE CONCAT('%', #{map.xxdzdqSZM}, '%') and
	      </if>
	      <if test="map.xxdzxQSQ != null">
	        XXDZX_Q_S_Q LIKE CONCAT('%', #{map.xxdzxQSQ}, '%') and
	      </if>
	      <if test="map.xxdzxZ != null">
	        XXDZX_Z LIKE CONCAT('%', #{map.xxdzxZ}, '%') and
	      </if>
          <if test="map.jdG != null">
	        JD_G LIKE CONCAT('%', #{map.jdG}, '%') and
	      </if>
		  <if test="map.wdG != null">
	        WD_G LIKE CONCAT('%', #{map.wdG}, '%') and
	      </if> 
	      <if test="map.snstmc != null">
	        SNSTMC LIKE CONCAT('%', #{map.snstmc}, '%') and
	      </if>
	      <if test="map.gyfspflD != null">
	        GYFSPFL_D LIKE CONCAT('%', #{map.gyfspflD}, '%') and
	      </if>
	      <if test="map.hxxylpflD != null">
	        HXXYLPFL_D LIKE CONCAT('%', #{map.hxxylpflD}, '%') and
	      </if>  
	      <if test="map.adpflD != null">
	        ADPFL_D LIKE CONCAT('%', #{map.adpflD}, '%') and
	      </if>
	      <if test="map.sylpflD != null">
	        SYLPFL_D LIKE CONCAT('%', #{map.sylpflD}, '%') and
	      </if>
	      <if test="map.hffpflQk != null">
	        HFFPFL_QK LIKE CONCAT('%', #{map.hffpflQk}, '%') and
	      </if>  	      
	      <if test="map.qhwpflQk != null">
	        QHWPFL_QK LIKE CONCAT('%', #{map.qhwpflQk}, '%') and
	      </if>
	      <if test="map.fsspflQk != null">
	        FSSPFL_QK LIKE CONCAT('%', #{map.fsspflQk}, '%') and
	      </if>
	      <if test="map.fsqpflQk != null">
	        FSQPFL_QK LIKE CONCAT('%', #{map.fsqpflQk}, '%') and
	      </if>  	      
	      <if test="map.fsgpflQk != null">
	        FSGPFL_QK LIKE CONCAT('%', #{map.fsgpflQk}, '%') and
	      </if>  	      
	      <if test="map.fsgpflQkDup1 != null">
	        FSGPFL_QK_DUP1 LIKE CONCAT('%', #{map.fsgpflQkDup1}, '%') and
	      </if>  	      
	      <if test="map.fszgpflQk != null">
	        FSZGPFL_QK LIKE CONCAT('%', #{map.fszgpflQk}, '%') and
	      </if>  	  	      
	      <if test="map.fsljgpflQk != null">
	        FSLJGPFL_QK LIKE CONCAT('%', #{map.fsljgpflQk}, '%') and
	      </if>  	      
	     
	 	      
	        is_del = 0 
		</trim>
	</select>
	<select id="selectKzdySum" resultType="Map">
        select KZDY,SUM(cast(HXXYLPFL_D as SIGNED INTEGER)) as HXXYLPFL_D,SUM(cast(ADPFL_D as SIGNED INTEGER)) as ADPFL_D
        from pollution 
        where 
        <trim>  
	      <if test="map.xxdzdqSZM != null">
	        XXDZDQ_S_Z_M LIKE CONCAT('%', #{map.xxdzdqSZM}, '%') and
	      </if>
	      <if test="map.xzqhmc != null">
	        XZQHMC LIKE CONCAT('%', #{map.xzqhmc}, '%') and
	      </if>
	      <if test="map.sy != null">
	        SZLYMC LIKE CONCAT('%', #{map.sy}, '%') and
	      </if>
	        is_del = 0 and KZDY != ''
		</trim> 
		group by KZDY
    </select>
    <select id="selectKzdmSum" resultType="Map">
        select KZDM,SUM(cast(HXXYLPFL_D as SIGNED INTEGER)) as HXXYLPFL_D,SUM(cast(ADPFL_D as SIGNED INTEGER)) as ADPFL_D
        from pollution 
        where 
        <trim>  
	      <if test="map.xxdzdqSZM != null">
	        XXDZDQ_S_Z_M LIKE CONCAT('%', #{map.xxdzdqSZM}, '%') and
	      </if>
	      <if test="map.xzqhmc != null">
	        XZQHMC LIKE CONCAT('%', #{map.xzqhmc}, '%') and
	      </if>
	      <if test="map.sy != null">
	        SZLYMC LIKE CONCAT('%', #{map.sy}, '%') and
	      </if>
	        is_del = 0 and KZDM != ''
		</trim> 
		group by KZDM
    </select>
	<select id="selectKzdyTotal" resultType="Map">
        select KZDY,SUM(cast(HXXYLCSL_D as SIGNED INTEGER)) as HXXYLCSL_D,SUM(cast(HXXYLPFL_D as SIGNED INTEGER)) as HXXYLPFL_D,SUM(cast(ADCSL_D as SIGNED INTEGER)) as ADCSL_D,SUM(cast(ADPFL_D as SIGNED INTEGER)) as ADPFL_D,SUM(cast(SYLCSL_D as SIGNED INTEGER)) as SYLCSL_D,SUM(cast(SYLPFL_D as SIGNED INTEGER)) as SYLPFL_D,
        SUM(cast(GYFSPFL_D as SIGNED INTEGER)) as GYFSPFL_D,SUM(cast(QHWPFL_QK as SIGNED INTEGER)) as QHWPFL_QK, SUM(cast(FSSPFL_QK as SIGNED INTEGER)) as FSSPFL_QK,
        SUM(cast(FSQPFL_QK as SIGNED INTEGER)) as FSQPFL_QK,SUM(cast(FSGPFL_QK as SIGNED INTEGER)) as FSGPFL_QK, SUM(cast(FSGPFL_QK_DUP1 as SIGNED INTEGER)) as FSGPFL_QK_DUP1,
        SUM(cast(FSZGPFL_QK as SIGNED INTEGER)) as FSZGPFL_QK, SUM(cast(FSLJGPFL_QK as SIGNED INTEGER)) as FSLJGPFL_QK, SUM(cast(HFFPFL_QK as SIGNED INTEGER)) as HFFPFL_QK
        from pollution 
        where 
        <trim>  
	      <if test="map.xxdzdqSZM != null">
	        XXDZDQ_S_Z_M LIKE CONCAT('%', #{map.xxdzdqSZM}, '%') and
	      </if>
	      <if test="map.xzqhmc != null">
	        XZQHMC LIKE CONCAT('%', #{map.xzqhmc}, '%') and
	      </if>
	      <if test="map.sy != null">
	        SZLYMC LIKE CONCAT('%', #{map.sy}, '%') and
	      </if>
	      <if test="list != null and list.size()>0">
	         KZDY in
	         <foreach item="item" index="index" collection="list" open="(" separator="," close=")">  
                 #{item}  
             </foreach>
             and
	      </if>
	        is_del = 0 and KZDY != ''
		</trim> 
        group by KZDY limit #{startPos},#{pageSize}
    </select>
    <select id="getKzdyCount" resultType="java.lang.Integer">
        select count(*) from (select KZDY from pollution 
        where 
        <trim>  
	      <if test="map.xxdzdqSZM != null">
	        XXDZDQ_S_Z_M LIKE CONCAT('%', #{map.xxdzdqSZM}, '%') and
	      </if>
	      <if test="map.xzqhmc != null">
	        XZQHMC LIKE CONCAT('%', #{map.xzqhmc}, '%') and
	      </if>
	      <if test="map.sy != null">
	        SZLYMC LIKE CONCAT('%', #{map.sy}, '%') and
	      </if>
	      <if test="list != null and list.size()>0">
	         KZDY in
	         <foreach item="item" index="index" collection="list" open="(" separator="," close=")">  
                 #{item}  
             </foreach>
             and
	      </if>
	         is_del = 0 and KZDY != ''
		</trim> 
        group by KZDY) as total
    </select>
        <select id="selectKzdyTotalByName" resultType="Map">
        select KZDY,SUM(cast(HXXYLCSL_D as SIGNED INTEGER)) as HXXYLCSL_D,SUM(cast(HXXYLPFL_D as SIGNED INTEGER)) as HXXYLPFL_D,SUM(cast(ADCSL_D as SIGNED INTEGER)) as ADCSL_D,SUM(cast(ADPFL_D as SIGNED INTEGER)) as ADPFL_D,SUM(cast(SYLCSL_D as SIGNED INTEGER)) as SYLCSL_D,SUM(cast(SYLPFL_D as SIGNED INTEGER)) as SYLPFL_D,
        SUM(cast(GYFSPFL_D as SIGNED INTEGER)) as GYFSPFL_D,SUM(cast(QHWPFL_QK as SIGNED INTEGER)) as QHWPFL_QK, SUM(cast(FSSPFL_QK as SIGNED INTEGER)) as FSSPFL_QK,
        SUM(cast(FSQPFL_QK as SIGNED INTEGER)) as FSQPFL_QK,SUM(cast(FSGPFL_QK as SIGNED INTEGER)) as FSGPFL_QK, SUM(cast(FSGPFL_QK_DUP1 as SIGNED INTEGER)) as FSGPFL_QK_DUP1,
        SUM(cast(FSZGPFL_QK as SIGNED INTEGER)) as FSZGPFL_QK, SUM(cast(FSLJGPFL_QK as SIGNED INTEGER)) as FSLJGPFL_QK,SUM(cast(HFFPFL_QK as SIGNED INTEGER)) as HFFPFL_QK
        from pollution 
        where 
        <trim>  
	      <if test="map.xxdzdqSZM != null">
	        XXDZDQ_S_Z_M LIKE CONCAT('%', #{map.xxdzdqSZM}, '%') and
	      </if>
	      <if test="map.xzqhmc != null">
	        XZQHMC LIKE CONCAT('%', #{map.xzqhmc}, '%') and
	      </if>
	      <if test="name != null">
	        KZDY LIKE CONCAT('%', #{name}, '%') and
	      </if>
	        is_del = 0 and KZDY != ''
		</trim> 
        group by KZDY limit #{startPos},#{pageSize}
    </select>
    <select id="getKzdyCountByName" resultType="java.lang.Integer">
        select count(*) from (select KZDY from pollution 
        where
        <trim>  
	      <if test="map.xxdzdqSZM != null">
	        XXDZDQ_S_Z_M LIKE CONCAT('%', #{map.xxdzdqSZM}, '%') and
	      </if>
	      <if test="map.xzqhmc != null">
	        XZQHMC LIKE CONCAT('%', #{map.xzqhmc}, '%') and
	      </if>
	      <if test="name != null">
	        KZDY LIKE CONCAT('%', #{name}, '%') and
	      </if>
	        is_del = 0 and KZDY != ''
		</trim>  
        group by KZDY) as total
    </select>
    <select id="computeKzdyTotal" resultType="java.lang.Integer">
        select 
        <trim prefix="COALESCE(SUM(cast(" suffix="as SIGNED INTEGER)),0)">
        ${map.prop}
        </trim>
        from pollution
        where
        <trim>
	      <if test="map.kzdy != null">
	        KZDY = #{map.kzdy} and
	      </if>
	        is_del = 0 and KZDY != ''
		</trim>  
    </select>
    <select id="selectKzdmTotal" resultType="Map">
        select KZDM,SUM(cast(HXXYLCSL_D as SIGNED INTEGER)) as HXXYLCSL_D,SUM(cast(HXXYLPFL_D as SIGNED INTEGER)) as HXXYLPFL_D,SUM(cast(ADCSL_D as SIGNED INTEGER)) as ADCSL_D,SUM(cast(ADPFL_D as SIGNED INTEGER)) as ADPFL_D,SUM(cast(SYLCSL_D as SIGNED INTEGER)) as SYLCSL_D,SUM(cast(SYLPFL_D as SIGNED INTEGER)) as SYLPFL_D,
        SUM(cast(GYFSPFL_D as SIGNED INTEGER)) as GYFSPFL_D,SUM(cast(QHWPFL_QK as SIGNED INTEGER)) as QHWPFL_QK, SUM(cast(FSSPFL_QK as SIGNED INTEGER)) as FSSPFL_QK,
        SUM(cast(FSQPFL_QK as SIGNED INTEGER)) as FSQPFL_QK,SUM(cast(FSGPFL_QK as SIGNED INTEGER)) as FSGPFL_QK, SUM(cast(FSGPFL_QK_DUP1 as SIGNED INTEGER)) as FSGPFL_QK_DUP1,
        SUM(cast(FSZGPFL_QK as SIGNED INTEGER)) as FSZGPFL_QK, SUM(cast(FSLJGPFL_QK as SIGNED INTEGER)) as FSLJGPFL_QK, SUM(cast(HFFPFL_QK as SIGNED INTEGER)) as HFFPFL_QK
        from pollution 
        where 
        <trim>  
	      <if test="map.xxdzdqSZM != null">
	        XXDZDQ_S_Z_M LIKE CONCAT('%', #{map.xxdzdqSZM}, '%') and
	      </if>
	      <if test="map.xzqhmc != null">
	        XZQHMC LIKE CONCAT('%', #{map.xzqhmc}, '%') and
	      </if>
	      <if test="map.sy != null">
	        SZLYMC LIKE CONCAT('%', #{map.sy}, '%') and
	      </if>
	      <if test="list != null and list.size()>0">
	         KZDM in
	         <foreach item="item" index="index" collection="list" open="(" separator="," close=")">  
                 #{item}  
             </foreach>
             and
	      </if>
	      KZDM is not null and KZDM != '-' and KZDM != '' and
	        is_del = 0 
		</trim> 
        group by KZDM limit #{startPos},#{pageSize}
    </select>

  <select id="selectKzdmAll" resultType="Map">
    select KZDM,SUM(cast(HXXYLCSL_D as SIGNED INTEGER)) as HXXYLCSL_D,SUM(cast(HXXYLPFL_D as SIGNED INTEGER)) as HXXYLPFL_D,SUM(cast(ADCSL_D as SIGNED INTEGER)) as ADCSL_D,SUM(cast(ADPFL_D as SIGNED INTEGER)) as ADPFL_D,SUM(cast(SYLCSL_D as SIGNED INTEGER)) as SYLCSL_D,SUM(cast(SYLPFL_D as SIGNED INTEGER)) as SYLPFL_D,
    SUM(cast(GYFSPFL_D as SIGNED INTEGER)) as GYFSPFL_D,SUM(cast(QHWPFL_QK as SIGNED INTEGER)) as QHWPFL_QK, SUM(cast(FSSPFL_QK as SIGNED INTEGER)) as FSSPFL_QK,
    SUM(cast(FSQPFL_QK as SIGNED INTEGER)) as FSQPFL_QK,SUM(cast(FSGPFL_QK as SIGNED INTEGER)) as FSGPFL_QK, SUM(cast(FSGPFL_QK_DUP1 as SIGNED INTEGER)) as FSGPFL_QK_DUP1,
    SUM(cast(FSZGPFL_QK as SIGNED INTEGER)) as FSZGPFL_QK, SUM(cast(FSLJGPFL_QK as SIGNED INTEGER)) as FSLJGPFL_QK, SUM(cast(HFFPFL_QK as SIGNED INTEGER)) as HFFPFL_QK
    from pollution
    where
    <trim>
      <if test="map.xxdzdqSZM != null">
        XXDZDQ_S_Z_M LIKE CONCAT('%', #{map.xxdzdqSZM}, '%') and
      </if>
      <if test="map.xzqhmc != null">
        XZQHMC LIKE CONCAT('%', #{map.xzqhmc}, '%') and
      </if>
      <if test="map.sy != null">
        SZLYMC LIKE CONCAT('%', #{map.sy}, '%') and
      </if>
      <if test="list != null and list.size()>0">
        KZDM in
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
          #{item}
        </foreach>
        and
      </if>
      KZDM is not null and KZDM != '-' and KZDM != '' and
      is_del = 0
    </trim>
    group by KZDM
  </select>
    <select id="getKzdmCount" resultType="java.lang.Integer">
        select count(*) from (select KZDM from pollution 
        where 
        <trim>  
	      <if test="map.xxdzdqSZM != null">
	        XXDZDQ_S_Z_M LIKE CONCAT('%', #{map.xxdzdqSZM}, '%') and
	      </if>
	      <if test="map.xzqhmc != null">
	        XZQHMC LIKE CONCAT('%', #{map.xzqhmc}, '%') and
	      </if>
	      <if test="map.sy != null">
	        SZLYMC LIKE CONCAT('%', #{map.sy}, '%') and
	      </if>
	      <if test="list != null and list.size()>0">
	         KZDM in
	         <foreach item="item" index="index" collection="list" open="(" separator="," close=")">  
                 #{item}  
             </foreach>
             and
	      </if>
	      	KZDM is not null and KZDM != '-' and KZDM != '' and
	        is_del = 0 
		</trim> 
        group by KZDM) as total
    </select>
        <select id="selectKzdmTotalByName" resultType="Map">
        select KZDM,SUM(cast(HXXYLCSL_D as SIGNED INTEGER)) as HXXYLCSL_D,SUM(cast(HXXYLPFL_D as SIGNED INTEGER)) as HXXYLPFL_D,SUM(cast(ADCSL_D as SIGNED INTEGER)) as ADCSL_D,SUM(cast(ADPFL_D as SIGNED INTEGER)) as ADPFL_D,SUM(cast(SYLCSL_D as SIGNED INTEGER)) as SYLCSL_D,SUM(cast(SYLPFL_D as SIGNED INTEGER)) as SYLPFL_D,
        SUM(cast(GYFSPFL_D as SIGNED INTEGER)) as GYFSPFL_D,SUM(cast(QHWPFL_QK as SIGNED INTEGER)) as QHWPFL_QK, SUM(cast(FSSPFL_QK as SIGNED INTEGER)) as FSSPFL_QK,
        SUM(cast(FSQPFL_QK as SIGNED INTEGER)) as FSQPFL_QK,SUM(cast(FSGPFL_QK as SIGNED INTEGER)) as FSGPFL_QK, SUM(cast(FSGPFL_QK_DUP1 as SIGNED INTEGER)) as FSGPFL_QK_DUP1,
        SUM(cast(FSZGPFL_QK as SIGNED INTEGER)) as FSZGPFL_QK, SUM(cast(FSLJGPFL_QK as SIGNED INTEGER)) as FSLJGPFL_QK,SUM(cast(HFFPFL_QK as SIGNED INTEGER)) as HFFPFL_QK
        from pollution 
        where 
        <trim>  
	      <if test="map.xxdzdqSZM != null">
	        XXDZDQ_S_Z_M LIKE CONCAT('%', #{map.xxdzdqSZM}, '%') and
	      </if>
	      <if test="map.xzqhmc != null">
	        XZQHMC LIKE CONCAT('%', #{map.xzqhmc}, '%') and
	      </if>
	      <if test="name != null">
	        KZDM LIKE CONCAT('%', #{name}, '%') and
	      </if>
	        is_del = 0 and KZDM != ''
		</trim> 
        group by KZDM limit #{startPos},#{pageSize}
    </select>
    <select id="getKzdmCountByName" resultType="java.lang.Integer">
        select count(*) from (select KZDM from pollution 
        where
        <trim>  
	      <if test="map.xxdzdqSZM != null">
	        XXDZDQ_S_Z_M LIKE CONCAT('%', #{map.xxdzdqSZM}, '%') and
	      </if>
	      <if test="map.xzqhmc != null">
	        XZQHMC LIKE CONCAT('%', #{map.xzqhmc}, '%') and
	      </if>
	      <if test="name != null">
	        KZDM LIKE CONCAT('%', #{name}, '%') and
	      </if>
	        is_del = 0 and KZDM != ''
		</trim>  
        group by KZDM) as total
    </select>
    <select id="computeKzdmTotal" resultType="java.lang.Integer">
        select 
        <trim prefix="COALESCE(SUM(cast(" suffix="as SIGNED INTEGER)),0)">
        ${map.prop}
        </trim>
        from pollution
        where
        <trim>
	      <if test="map.kzdm != null">
	        KZDM = #{map.kzdm} and
	      </if>
	        is_del = 0 and KZDM != ''
		</trim>  
    </select>
   <!--  <select id="computeKzdmTotal_std" resultType="java.lang.String">
      select #{map.prop}
      from qmp_wrxx
      where
      <trim>
        <if test="map.kzdm != null">
          section_name = #{map.kzdm} and
        </if>
        section_name != ''
      </trim>
      limit 1
    </select> -->
    <select id="selectWater" resultType="Map">
        select distinct SZLYMC
        from pollution
        where
	    is_del = 0 
	    and SZLYMC != ''
    </select>
</mapper>